// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/orbit-ops/mission-control/ent/access"
	"github.com/orbit-ops/mission-control/ent/approval"
	"github.com/orbit-ops/mission-control/ent/audit"
	"github.com/orbit-ops/mission-control/ent/mission"
	"github.com/orbit-ops/mission-control/ent/predicate"
	"github.com/orbit-ops/mission-control/ent/request"
	"github.com/orbit-ops/mission-control/ent/rocket"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccess   = "Access"
	TypeApproval = "Approval"
	TypeAudit    = "Audit"
	TypeMission  = "Mission"
	TypeRequest  = "Request"
	TypeRocket   = "Rocket"
)

// AccessMutation represents an operation that mutates the Access nodes in the graph.
type AccessMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	access_time      *time.Time
	approved         *bool
	rolled_back      *bool
	rollback_time    *time.Time
	end_time         *time.Time
	request_id       *uuid.UUID
	clearedFields    map[string]struct{}
	approvals        *uuid.UUID
	clearedapprovals bool
	done             bool
	oldValue         func(context.Context) (*Access, error)
	predicates       []predicate.Access
}

var _ ent.Mutation = (*AccessMutation)(nil)

// accessOption allows management of the mutation configuration using functional options.
type accessOption func(*AccessMutation)

// newAccessMutation creates new mutation for the Access entity.
func newAccessMutation(c config, op Op, opts ...accessOption) *AccessMutation {
	m := &AccessMutation{
		config:        c,
		op:            op,
		typ:           TypeAccess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccessID sets the ID field of the mutation.
func withAccessID(id uuid.UUID) accessOption {
	return func(m *AccessMutation) {
		var (
			err   error
			once  sync.Once
			value *Access
		)
		m.oldValue = func(ctx context.Context) (*Access, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Access.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccess sets the old Access of the mutation.
func withAccess(node *Access) accessOption {
	return func(m *AccessMutation) {
		m.oldValue = func(context.Context) (*Access, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Access entities.
func (m *AccessMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccessMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccessMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Access.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccessTime sets the "access_time" field.
func (m *AccessMutation) SetAccessTime(t time.Time) {
	m.access_time = &t
}

// AccessTime returns the value of the "access_time" field in the mutation.
func (m *AccessMutation) AccessTime() (r time.Time, exists bool) {
	v := m.access_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessTime returns the old "access_time" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldAccessTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessTime: %w", err)
	}
	return oldValue.AccessTime, nil
}

// ResetAccessTime resets all changes to the "access_time" field.
func (m *AccessMutation) ResetAccessTime() {
	m.access_time = nil
}

// SetApproved sets the "approved" field.
func (m *AccessMutation) SetApproved(b bool) {
	m.approved = &b
}

// Approved returns the value of the "approved" field in the mutation.
func (m *AccessMutation) Approved() (r bool, exists bool) {
	v := m.approved
	if v == nil {
		return
	}
	return *v, true
}

// OldApproved returns the old "approved" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldApproved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproved: %w", err)
	}
	return oldValue.Approved, nil
}

// ResetApproved resets all changes to the "approved" field.
func (m *AccessMutation) ResetApproved() {
	m.approved = nil
}

// SetRolledBack sets the "rolled_back" field.
func (m *AccessMutation) SetRolledBack(b bool) {
	m.rolled_back = &b
}

// RolledBack returns the value of the "rolled_back" field in the mutation.
func (m *AccessMutation) RolledBack() (r bool, exists bool) {
	v := m.rolled_back
	if v == nil {
		return
	}
	return *v, true
}

// OldRolledBack returns the old "rolled_back" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldRolledBack(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRolledBack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRolledBack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRolledBack: %w", err)
	}
	return oldValue.RolledBack, nil
}

// ResetRolledBack resets all changes to the "rolled_back" field.
func (m *AccessMutation) ResetRolledBack() {
	m.rolled_back = nil
}

// SetRollbackTime sets the "rollback_time" field.
func (m *AccessMutation) SetRollbackTime(t time.Time) {
	m.rollback_time = &t
}

// RollbackTime returns the value of the "rollback_time" field in the mutation.
func (m *AccessMutation) RollbackTime() (r time.Time, exists bool) {
	v := m.rollback_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRollbackTime returns the old "rollback_time" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldRollbackTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRollbackTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRollbackTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRollbackTime: %w", err)
	}
	return oldValue.RollbackTime, nil
}

// ClearRollbackTime clears the value of the "rollback_time" field.
func (m *AccessMutation) ClearRollbackTime() {
	m.rollback_time = nil
	m.clearedFields[access.FieldRollbackTime] = struct{}{}
}

// RollbackTimeCleared returns if the "rollback_time" field was cleared in this mutation.
func (m *AccessMutation) RollbackTimeCleared() bool {
	_, ok := m.clearedFields[access.FieldRollbackTime]
	return ok
}

// ResetRollbackTime resets all changes to the "rollback_time" field.
func (m *AccessMutation) ResetRollbackTime() {
	m.rollback_time = nil
	delete(m.clearedFields, access.FieldRollbackTime)
}

// SetEndTime sets the "end_time" field.
func (m *AccessMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *AccessMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *AccessMutation) ResetEndTime() {
	m.end_time = nil
}

// SetRequestID sets the "request_id" field.
func (m *AccessMutation) SetRequestID(u uuid.UUID) {
	m.request_id = &u
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *AccessMutation) RequestID() (r uuid.UUID, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldRequestID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *AccessMutation) ResetRequestID() {
	m.request_id = nil
}

// SetApprovalsID sets the "approvals" edge to the Access entity by id.
func (m *AccessMutation) SetApprovalsID(id uuid.UUID) {
	m.approvals = &id
}

// ClearApprovals clears the "approvals" edge to the Access entity.
func (m *AccessMutation) ClearApprovals() {
	m.clearedapprovals = true
}

// ApprovalsCleared reports if the "approvals" edge to the Access entity was cleared.
func (m *AccessMutation) ApprovalsCleared() bool {
	return m.clearedapprovals
}

// ApprovalsID returns the "approvals" edge ID in the mutation.
func (m *AccessMutation) ApprovalsID() (id uuid.UUID, exists bool) {
	if m.approvals != nil {
		return *m.approvals, true
	}
	return
}

// ApprovalsIDs returns the "approvals" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApprovalsID instead. It exists only for internal usage by the builders.
func (m *AccessMutation) ApprovalsIDs() (ids []uuid.UUID) {
	if id := m.approvals; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApprovals resets all changes to the "approvals" edge.
func (m *AccessMutation) ResetApprovals() {
	m.approvals = nil
	m.clearedapprovals = false
}

// Where appends a list predicates to the AccessMutation builder.
func (m *AccessMutation) Where(ps ...predicate.Access) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccessMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccessMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Access, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccessMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccessMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Access).
func (m *AccessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccessMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.access_time != nil {
		fields = append(fields, access.FieldAccessTime)
	}
	if m.approved != nil {
		fields = append(fields, access.FieldApproved)
	}
	if m.rolled_back != nil {
		fields = append(fields, access.FieldRolledBack)
	}
	if m.rollback_time != nil {
		fields = append(fields, access.FieldRollbackTime)
	}
	if m.end_time != nil {
		fields = append(fields, access.FieldEndTime)
	}
	if m.request_id != nil {
		fields = append(fields, access.FieldRequestID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case access.FieldAccessTime:
		return m.AccessTime()
	case access.FieldApproved:
		return m.Approved()
	case access.FieldRolledBack:
		return m.RolledBack()
	case access.FieldRollbackTime:
		return m.RollbackTime()
	case access.FieldEndTime:
		return m.EndTime()
	case access.FieldRequestID:
		return m.RequestID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case access.FieldAccessTime:
		return m.OldAccessTime(ctx)
	case access.FieldApproved:
		return m.OldApproved(ctx)
	case access.FieldRolledBack:
		return m.OldRolledBack(ctx)
	case access.FieldRollbackTime:
		return m.OldRollbackTime(ctx)
	case access.FieldEndTime:
		return m.OldEndTime(ctx)
	case access.FieldRequestID:
		return m.OldRequestID(ctx)
	}
	return nil, fmt.Errorf("unknown Access field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case access.FieldAccessTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessTime(v)
		return nil
	case access.FieldApproved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproved(v)
		return nil
	case access.FieldRolledBack:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRolledBack(v)
		return nil
	case access.FieldRollbackTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRollbackTime(v)
		return nil
	case access.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case access.FieldRequestID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	}
	return fmt.Errorf("unknown Access field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Access numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccessMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(access.FieldRollbackTime) {
		fields = append(fields, access.FieldRollbackTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccessMutation) ClearField(name string) error {
	switch name {
	case access.FieldRollbackTime:
		m.ClearRollbackTime()
		return nil
	}
	return fmt.Errorf("unknown Access nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccessMutation) ResetField(name string) error {
	switch name {
	case access.FieldAccessTime:
		m.ResetAccessTime()
		return nil
	case access.FieldApproved:
		m.ResetApproved()
		return nil
	case access.FieldRolledBack:
		m.ResetRolledBack()
		return nil
	case access.FieldRollbackTime:
		m.ResetRollbackTime()
		return nil
	case access.FieldEndTime:
		m.ResetEndTime()
		return nil
	case access.FieldRequestID:
		m.ResetRequestID()
		return nil
	}
	return fmt.Errorf("unknown Access field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccessMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.approvals != nil {
		edges = append(edges, access.EdgeApprovals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case access.EdgeApprovals:
		if id := m.approvals; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccessMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapprovals {
		edges = append(edges, access.EdgeApprovals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccessMutation) EdgeCleared(name string) bool {
	switch name {
	case access.EdgeApprovals:
		return m.clearedapprovals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccessMutation) ClearEdge(name string) error {
	switch name {
	case access.EdgeApprovals:
		m.ClearApprovals()
		return nil
	}
	return fmt.Errorf("unknown Access unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccessMutation) ResetEdge(name string) error {
	switch name {
	case access.EdgeApprovals:
		m.ResetApprovals()
		return nil
	}
	return fmt.Errorf("unknown Access edge %s", name)
}

// ApprovalMutation represents an operation that mutates the Approval nodes in the graph.
type ApprovalMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	person          *string
	approved_time   *time.Time
	approved        *bool
	revoked         *bool
	revoked_time    *time.Time
	request_id      *uuid.UUID
	clearedFields   map[string]struct{}
	requests        *uuid.UUID
	clearedrequests bool
	done            bool
	oldValue        func(context.Context) (*Approval, error)
	predicates      []predicate.Approval
}

var _ ent.Mutation = (*ApprovalMutation)(nil)

// approvalOption allows management of the mutation configuration using functional options.
type approvalOption func(*ApprovalMutation)

// newApprovalMutation creates new mutation for the Approval entity.
func newApprovalMutation(c config, op Op, opts ...approvalOption) *ApprovalMutation {
	m := &ApprovalMutation{
		config:        c,
		op:            op,
		typ:           TypeApproval,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApprovalID sets the ID field of the mutation.
func withApprovalID(id uuid.UUID) approvalOption {
	return func(m *ApprovalMutation) {
		var (
			err   error
			once  sync.Once
			value *Approval
		)
		m.oldValue = func(ctx context.Context) (*Approval, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Approval.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApproval sets the old Approval of the mutation.
func withApproval(node *Approval) approvalOption {
	return func(m *ApprovalMutation) {
		m.oldValue = func(context.Context) (*Approval, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApprovalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApprovalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Approval entities.
func (m *ApprovalMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApprovalMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApprovalMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Approval.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPerson sets the "person" field.
func (m *ApprovalMutation) SetPerson(s string) {
	m.person = &s
}

// Person returns the value of the "person" field in the mutation.
func (m *ApprovalMutation) Person() (r string, exists bool) {
	v := m.person
	if v == nil {
		return
	}
	return *v, true
}

// OldPerson returns the old "person" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldPerson(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPerson is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPerson requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPerson: %w", err)
	}
	return oldValue.Person, nil
}

// ResetPerson resets all changes to the "person" field.
func (m *ApprovalMutation) ResetPerson() {
	m.person = nil
}

// SetApprovedTime sets the "approved_time" field.
func (m *ApprovalMutation) SetApprovedTime(t time.Time) {
	m.approved_time = &t
}

// ApprovedTime returns the value of the "approved_time" field in the mutation.
func (m *ApprovalMutation) ApprovedTime() (r time.Time, exists bool) {
	v := m.approved_time
	if v == nil {
		return
	}
	return *v, true
}

// OldApprovedTime returns the old "approved_time" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldApprovedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApprovedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApprovedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprovedTime: %w", err)
	}
	return oldValue.ApprovedTime, nil
}

// ResetApprovedTime resets all changes to the "approved_time" field.
func (m *ApprovalMutation) ResetApprovedTime() {
	m.approved_time = nil
}

// SetApproved sets the "approved" field.
func (m *ApprovalMutation) SetApproved(b bool) {
	m.approved = &b
}

// Approved returns the value of the "approved" field in the mutation.
func (m *ApprovalMutation) Approved() (r bool, exists bool) {
	v := m.approved
	if v == nil {
		return
	}
	return *v, true
}

// OldApproved returns the old "approved" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldApproved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproved: %w", err)
	}
	return oldValue.Approved, nil
}

// ResetApproved resets all changes to the "approved" field.
func (m *ApprovalMutation) ResetApproved() {
	m.approved = nil
}

// SetRevoked sets the "revoked" field.
func (m *ApprovalMutation) SetRevoked(b bool) {
	m.revoked = &b
}

// Revoked returns the value of the "revoked" field in the mutation.
func (m *ApprovalMutation) Revoked() (r bool, exists bool) {
	v := m.revoked
	if v == nil {
		return
	}
	return *v, true
}

// OldRevoked returns the old "revoked" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldRevoked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevoked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevoked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevoked: %w", err)
	}
	return oldValue.Revoked, nil
}

// ResetRevoked resets all changes to the "revoked" field.
func (m *ApprovalMutation) ResetRevoked() {
	m.revoked = nil
}

// SetRevokedTime sets the "revoked_time" field.
func (m *ApprovalMutation) SetRevokedTime(t time.Time) {
	m.revoked_time = &t
}

// RevokedTime returns the value of the "revoked_time" field in the mutation.
func (m *ApprovalMutation) RevokedTime() (r time.Time, exists bool) {
	v := m.revoked_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRevokedTime returns the old "revoked_time" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldRevokedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevokedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevokedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevokedTime: %w", err)
	}
	return oldValue.RevokedTime, nil
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (m *ApprovalMutation) ClearRevokedTime() {
	m.revoked_time = nil
	m.clearedFields[approval.FieldRevokedTime] = struct{}{}
}

// RevokedTimeCleared returns if the "revoked_time" field was cleared in this mutation.
func (m *ApprovalMutation) RevokedTimeCleared() bool {
	_, ok := m.clearedFields[approval.FieldRevokedTime]
	return ok
}

// ResetRevokedTime resets all changes to the "revoked_time" field.
func (m *ApprovalMutation) ResetRevokedTime() {
	m.revoked_time = nil
	delete(m.clearedFields, approval.FieldRevokedTime)
}

// SetRequestID sets the "request_id" field.
func (m *ApprovalMutation) SetRequestID(u uuid.UUID) {
	m.request_id = &u
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *ApprovalMutation) RequestID() (r uuid.UUID, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldRequestID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *ApprovalMutation) ResetRequestID() {
	m.request_id = nil
}

// SetRequestsID sets the "requests" edge to the Request entity by id.
func (m *ApprovalMutation) SetRequestsID(id uuid.UUID) {
	m.requests = &id
}

// ClearRequests clears the "requests" edge to the Request entity.
func (m *ApprovalMutation) ClearRequests() {
	m.clearedrequests = true
}

// RequestsCleared reports if the "requests" edge to the Request entity was cleared.
func (m *ApprovalMutation) RequestsCleared() bool {
	return m.clearedrequests
}

// RequestsID returns the "requests" edge ID in the mutation.
func (m *ApprovalMutation) RequestsID() (id uuid.UUID, exists bool) {
	if m.requests != nil {
		return *m.requests, true
	}
	return
}

// RequestsIDs returns the "requests" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequestsID instead. It exists only for internal usage by the builders.
func (m *ApprovalMutation) RequestsIDs() (ids []uuid.UUID) {
	if id := m.requests; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequests resets all changes to the "requests" edge.
func (m *ApprovalMutation) ResetRequests() {
	m.requests = nil
	m.clearedrequests = false
}

// Where appends a list predicates to the ApprovalMutation builder.
func (m *ApprovalMutation) Where(ps ...predicate.Approval) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApprovalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApprovalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Approval, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApprovalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApprovalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Approval).
func (m *ApprovalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApprovalMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.person != nil {
		fields = append(fields, approval.FieldPerson)
	}
	if m.approved_time != nil {
		fields = append(fields, approval.FieldApprovedTime)
	}
	if m.approved != nil {
		fields = append(fields, approval.FieldApproved)
	}
	if m.revoked != nil {
		fields = append(fields, approval.FieldRevoked)
	}
	if m.revoked_time != nil {
		fields = append(fields, approval.FieldRevokedTime)
	}
	if m.request_id != nil {
		fields = append(fields, approval.FieldRequestID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApprovalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case approval.FieldPerson:
		return m.Person()
	case approval.FieldApprovedTime:
		return m.ApprovedTime()
	case approval.FieldApproved:
		return m.Approved()
	case approval.FieldRevoked:
		return m.Revoked()
	case approval.FieldRevokedTime:
		return m.RevokedTime()
	case approval.FieldRequestID:
		return m.RequestID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApprovalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case approval.FieldPerson:
		return m.OldPerson(ctx)
	case approval.FieldApprovedTime:
		return m.OldApprovedTime(ctx)
	case approval.FieldApproved:
		return m.OldApproved(ctx)
	case approval.FieldRevoked:
		return m.OldRevoked(ctx)
	case approval.FieldRevokedTime:
		return m.OldRevokedTime(ctx)
	case approval.FieldRequestID:
		return m.OldRequestID(ctx)
	}
	return nil, fmt.Errorf("unknown Approval field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case approval.FieldPerson:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPerson(v)
		return nil
	case approval.FieldApprovedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprovedTime(v)
		return nil
	case approval.FieldApproved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproved(v)
		return nil
	case approval.FieldRevoked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevoked(v)
		return nil
	case approval.FieldRevokedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevokedTime(v)
		return nil
	case approval.FieldRequestID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	}
	return fmt.Errorf("unknown Approval field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApprovalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApprovalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Approval numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApprovalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(approval.FieldRevokedTime) {
		fields = append(fields, approval.FieldRevokedTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApprovalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApprovalMutation) ClearField(name string) error {
	switch name {
	case approval.FieldRevokedTime:
		m.ClearRevokedTime()
		return nil
	}
	return fmt.Errorf("unknown Approval nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApprovalMutation) ResetField(name string) error {
	switch name {
	case approval.FieldPerson:
		m.ResetPerson()
		return nil
	case approval.FieldApprovedTime:
		m.ResetApprovedTime()
		return nil
	case approval.FieldApproved:
		m.ResetApproved()
		return nil
	case approval.FieldRevoked:
		m.ResetRevoked()
		return nil
	case approval.FieldRevokedTime:
		m.ResetRevokedTime()
		return nil
	case approval.FieldRequestID:
		m.ResetRequestID()
		return nil
	}
	return fmt.Errorf("unknown Approval field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApprovalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.requests != nil {
		edges = append(edges, approval.EdgeRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApprovalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case approval.EdgeRequests:
		if id := m.requests; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApprovalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApprovalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApprovalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrequests {
		edges = append(edges, approval.EdgeRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApprovalMutation) EdgeCleared(name string) bool {
	switch name {
	case approval.EdgeRequests:
		return m.clearedrequests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApprovalMutation) ClearEdge(name string) error {
	switch name {
	case approval.EdgeRequests:
		m.ClearRequests()
		return nil
	}
	return fmt.Errorf("unknown Approval unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApprovalMutation) ResetEdge(name string) error {
	switch name {
	case approval.EdgeRequests:
		m.ResetRequests()
		return nil
	}
	return fmt.Errorf("unknown Approval edge %s", name)
}

// AuditMutation represents an operation that mutates the Audit nodes in the graph.
type AuditMutation struct {
	config
	op            Op
	typ           string
	id            *string
	action        *string
	author        *string
	timestamp     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Audit, error)
	predicates    []predicate.Audit
}

var _ ent.Mutation = (*AuditMutation)(nil)

// auditOption allows management of the mutation configuration using functional options.
type auditOption func(*AuditMutation)

// newAuditMutation creates new mutation for the Audit entity.
func newAuditMutation(c config, op Op, opts ...auditOption) *AuditMutation {
	m := &AuditMutation{
		config:        c,
		op:            op,
		typ:           TypeAudit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuditID sets the ID field of the mutation.
func withAuditID(id string) auditOption {
	return func(m *AuditMutation) {
		var (
			err   error
			once  sync.Once
			value *Audit
		)
		m.oldValue = func(ctx context.Context) (*Audit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Audit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAudit sets the old Audit of the mutation.
func withAudit(node *Audit) auditOption {
	return func(m *AuditMutation) {
		m.oldValue = func(context.Context) (*Audit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuditMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuditMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Audit entities.
func (m *AuditMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuditMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuditMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Audit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAction sets the "action" field.
func (m *AuditMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *AuditMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Audit entity.
// If the Audit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *AuditMutation) ResetAction() {
	m.action = nil
}

// SetAuthor sets the "author" field.
func (m *AuditMutation) SetAuthor(s string) {
	m.author = &s
}

// Author returns the value of the "author" field in the mutation.
func (m *AuditMutation) Author() (r string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Audit entity.
// If the Audit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditMutation) OldAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// ResetAuthor resets all changes to the "author" field.
func (m *AuditMutation) ResetAuthor() {
	m.author = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *AuditMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *AuditMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Audit entity.
// If the Audit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *AuditMutation) ResetTimestamp() {
	m.timestamp = nil
}

// Where appends a list predicates to the AuditMutation builder.
func (m *AuditMutation) Where(ps ...predicate.Audit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuditMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuditMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Audit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuditMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuditMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Audit).
func (m *AuditMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuditMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.action != nil {
		fields = append(fields, audit.FieldAction)
	}
	if m.author != nil {
		fields = append(fields, audit.FieldAuthor)
	}
	if m.timestamp != nil {
		fields = append(fields, audit.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuditMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case audit.FieldAction:
		return m.Action()
	case audit.FieldAuthor:
		return m.Author()
	case audit.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuditMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case audit.FieldAction:
		return m.OldAction(ctx)
	case audit.FieldAuthor:
		return m.OldAuthor(ctx)
	case audit.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown Audit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditMutation) SetField(name string, value ent.Value) error {
	switch name {
	case audit.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case audit.FieldAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case audit.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown Audit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuditMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuditMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Audit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuditMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuditMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuditMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Audit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuditMutation) ResetField(name string) error {
	switch name {
	case audit.FieldAction:
		m.ResetAction()
		return nil
	case audit.FieldAuthor:
		m.ResetAuthor()
		return nil
	case audit.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown Audit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuditMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuditMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuditMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuditMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuditMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuditMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuditMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Audit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuditMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Audit edge %s", name)
}

// MissionMutation represents an operation that mutates the Mission nodes in the graph.
type MissionMutation struct {
	config
	op               Op
	typ              string
	id               *string
	description      *string
	image            *string
	min_approvers    *int
	addmin_approvers *int
	clearedFields    map[string]struct{}
	rocket           *string
	clearedrocket    bool
	requests         map[uuid.UUID]struct{}
	removedrequests  map[uuid.UUID]struct{}
	clearedrequests  bool
	done             bool
	oldValue         func(context.Context) (*Mission, error)
	predicates       []predicate.Mission
}

var _ ent.Mutation = (*MissionMutation)(nil)

// missionOption allows management of the mutation configuration using functional options.
type missionOption func(*MissionMutation)

// newMissionMutation creates new mutation for the Mission entity.
func newMissionMutation(c config, op Op, opts ...missionOption) *MissionMutation {
	m := &MissionMutation{
		config:        c,
		op:            op,
		typ:           TypeMission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMissionID sets the ID field of the mutation.
func withMissionID(id string) missionOption {
	return func(m *MissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Mission
		)
		m.oldValue = func(ctx context.Context) (*Mission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMission sets the old Mission of the mutation.
func withMission(node *Mission) missionOption {
	return func(m *MissionMutation) {
		m.oldValue = func(context.Context) (*Mission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Mission entities.
func (m *MissionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MissionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MissionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Mission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *MissionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MissionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MissionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[mission.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MissionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[mission.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MissionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, mission.FieldDescription)
}

// SetImage sets the "image" field.
func (m *MissionMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *MissionMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *MissionMutation) ResetImage() {
	m.image = nil
}

// SetMinApprovers sets the "min_approvers" field.
func (m *MissionMutation) SetMinApprovers(i int) {
	m.min_approvers = &i
	m.addmin_approvers = nil
}

// MinApprovers returns the value of the "min_approvers" field in the mutation.
func (m *MissionMutation) MinApprovers() (r int, exists bool) {
	v := m.min_approvers
	if v == nil {
		return
	}
	return *v, true
}

// OldMinApprovers returns the old "min_approvers" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldMinApprovers(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinApprovers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinApprovers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinApprovers: %w", err)
	}
	return oldValue.MinApprovers, nil
}

// AddMinApprovers adds i to the "min_approvers" field.
func (m *MissionMutation) AddMinApprovers(i int) {
	if m.addmin_approvers != nil {
		*m.addmin_approvers += i
	} else {
		m.addmin_approvers = &i
	}
}

// AddedMinApprovers returns the value that was added to the "min_approvers" field in this mutation.
func (m *MissionMutation) AddedMinApprovers() (r int, exists bool) {
	v := m.addmin_approvers
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinApprovers resets all changes to the "min_approvers" field.
func (m *MissionMutation) ResetMinApprovers() {
	m.min_approvers = nil
	m.addmin_approvers = nil
}

// SetRocketID sets the "rocket_id" field.
func (m *MissionMutation) SetRocketID(s string) {
	m.rocket = &s
}

// RocketID returns the value of the "rocket_id" field in the mutation.
func (m *MissionMutation) RocketID() (r string, exists bool) {
	v := m.rocket
	if v == nil {
		return
	}
	return *v, true
}

// OldRocketID returns the old "rocket_id" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldRocketID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRocketID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRocketID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRocketID: %w", err)
	}
	return oldValue.RocketID, nil
}

// ResetRocketID resets all changes to the "rocket_id" field.
func (m *MissionMutation) ResetRocketID() {
	m.rocket = nil
}

// ClearRocket clears the "rocket" edge to the Rocket entity.
func (m *MissionMutation) ClearRocket() {
	m.clearedrocket = true
	m.clearedFields[mission.FieldRocketID] = struct{}{}
}

// RocketCleared reports if the "rocket" edge to the Rocket entity was cleared.
func (m *MissionMutation) RocketCleared() bool {
	return m.clearedrocket
}

// RocketIDs returns the "rocket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RocketID instead. It exists only for internal usage by the builders.
func (m *MissionMutation) RocketIDs() (ids []string) {
	if id := m.rocket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRocket resets all changes to the "rocket" edge.
func (m *MissionMutation) ResetRocket() {
	m.rocket = nil
	m.clearedrocket = false
}

// AddRequestIDs adds the "requests" edge to the Request entity by ids.
func (m *MissionMutation) AddRequestIDs(ids ...uuid.UUID) {
	if m.requests == nil {
		m.requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.requests[ids[i]] = struct{}{}
	}
}

// ClearRequests clears the "requests" edge to the Request entity.
func (m *MissionMutation) ClearRequests() {
	m.clearedrequests = true
}

// RequestsCleared reports if the "requests" edge to the Request entity was cleared.
func (m *MissionMutation) RequestsCleared() bool {
	return m.clearedrequests
}

// RemoveRequestIDs removes the "requests" edge to the Request entity by IDs.
func (m *MissionMutation) RemoveRequestIDs(ids ...uuid.UUID) {
	if m.removedrequests == nil {
		m.removedrequests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.requests, ids[i])
		m.removedrequests[ids[i]] = struct{}{}
	}
}

// RemovedRequests returns the removed IDs of the "requests" edge to the Request entity.
func (m *MissionMutation) RemovedRequestsIDs() (ids []uuid.UUID) {
	for id := range m.removedrequests {
		ids = append(ids, id)
	}
	return
}

// RequestsIDs returns the "requests" edge IDs in the mutation.
func (m *MissionMutation) RequestsIDs() (ids []uuid.UUID) {
	for id := range m.requests {
		ids = append(ids, id)
	}
	return
}

// ResetRequests resets all changes to the "requests" edge.
func (m *MissionMutation) ResetRequests() {
	m.requests = nil
	m.clearedrequests = false
	m.removedrequests = nil
}

// Where appends a list predicates to the MissionMutation builder.
func (m *MissionMutation) Where(ps ...predicate.Mission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Mission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Mission).
func (m *MissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MissionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.description != nil {
		fields = append(fields, mission.FieldDescription)
	}
	if m.image != nil {
		fields = append(fields, mission.FieldImage)
	}
	if m.min_approvers != nil {
		fields = append(fields, mission.FieldMinApprovers)
	}
	if m.rocket != nil {
		fields = append(fields, mission.FieldRocketID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mission.FieldDescription:
		return m.Description()
	case mission.FieldImage:
		return m.Image()
	case mission.FieldMinApprovers:
		return m.MinApprovers()
	case mission.FieldRocketID:
		return m.RocketID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mission.FieldDescription:
		return m.OldDescription(ctx)
	case mission.FieldImage:
		return m.OldImage(ctx)
	case mission.FieldMinApprovers:
		return m.OldMinApprovers(ctx)
	case mission.FieldRocketID:
		return m.OldRocketID(ctx)
	}
	return nil, fmt.Errorf("unknown Mission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mission.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case mission.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case mission.FieldMinApprovers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinApprovers(v)
		return nil
	case mission.FieldRocketID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRocketID(v)
		return nil
	}
	return fmt.Errorf("unknown Mission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MissionMutation) AddedFields() []string {
	var fields []string
	if m.addmin_approvers != nil {
		fields = append(fields, mission.FieldMinApprovers)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mission.FieldMinApprovers:
		return m.AddedMinApprovers()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mission.FieldMinApprovers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinApprovers(v)
		return nil
	}
	return fmt.Errorf("unknown Mission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mission.FieldDescription) {
		fields = append(fields, mission.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MissionMutation) ClearField(name string) error {
	switch name {
	case mission.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Mission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MissionMutation) ResetField(name string) error {
	switch name {
	case mission.FieldDescription:
		m.ResetDescription()
		return nil
	case mission.FieldImage:
		m.ResetImage()
		return nil
	case mission.FieldMinApprovers:
		m.ResetMinApprovers()
		return nil
	case mission.FieldRocketID:
		m.ResetRocketID()
		return nil
	}
	return fmt.Errorf("unknown Mission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rocket != nil {
		edges = append(edges, mission.EdgeRocket)
	}
	if m.requests != nil {
		edges = append(edges, mission.EdgeRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mission.EdgeRocket:
		if id := m.rocket; id != nil {
			return []ent.Value{*id}
		}
	case mission.EdgeRequests:
		ids := make([]ent.Value, 0, len(m.requests))
		for id := range m.requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrequests != nil {
		edges = append(edges, mission.EdgeRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mission.EdgeRequests:
		ids := make([]ent.Value, 0, len(m.removedrequests))
		for id := range m.removedrequests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrocket {
		edges = append(edges, mission.EdgeRocket)
	}
	if m.clearedrequests {
		edges = append(edges, mission.EdgeRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MissionMutation) EdgeCleared(name string) bool {
	switch name {
	case mission.EdgeRocket:
		return m.clearedrocket
	case mission.EdgeRequests:
		return m.clearedrequests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MissionMutation) ClearEdge(name string) error {
	switch name {
	case mission.EdgeRocket:
		m.ClearRocket()
		return nil
	}
	return fmt.Errorf("unknown Mission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MissionMutation) ResetEdge(name string) error {
	switch name {
	case mission.EdgeRocket:
		m.ResetRocket()
		return nil
	case mission.EdgeRequests:
		m.ResetRequests()
		return nil
	}
	return fmt.Errorf("unknown Mission edge %s", name)
}

// RequestMutation represents an operation that mutates the Request nodes in the graph.
type RequestMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	reason         *string
	requester      *string
	mission_id     *string
	clearedFields  map[string]struct{}
	mission        *string
	clearedmission bool
	done           bool
	oldValue       func(context.Context) (*Request, error)
	predicates     []predicate.Request
}

var _ ent.Mutation = (*RequestMutation)(nil)

// requestOption allows management of the mutation configuration using functional options.
type requestOption func(*RequestMutation)

// newRequestMutation creates new mutation for the Request entity.
func newRequestMutation(c config, op Op, opts ...requestOption) *RequestMutation {
	m := &RequestMutation{
		config:        c,
		op:            op,
		typ:           TypeRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRequestID sets the ID field of the mutation.
func withRequestID(id uuid.UUID) requestOption {
	return func(m *RequestMutation) {
		var (
			err   error
			once  sync.Once
			value *Request
		)
		m.oldValue = func(ctx context.Context) (*Request, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Request.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRequest sets the old Request of the mutation.
func withRequest(node *Request) requestOption {
	return func(m *RequestMutation) {
		m.oldValue = func(context.Context) (*Request, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Request entities.
func (m *RequestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RequestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RequestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Request.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetReason sets the "reason" field.
func (m *RequestMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *RequestMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *RequestMutation) ResetReason() {
	m.reason = nil
}

// SetRequester sets the "requester" field.
func (m *RequestMutation) SetRequester(s string) {
	m.requester = &s
}

// Requester returns the value of the "requester" field in the mutation.
func (m *RequestMutation) Requester() (r string, exists bool) {
	v := m.requester
	if v == nil {
		return
	}
	return *v, true
}

// OldRequester returns the old "requester" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldRequester(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequester is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequester requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequester: %w", err)
	}
	return oldValue.Requester, nil
}

// ResetRequester resets all changes to the "requester" field.
func (m *RequestMutation) ResetRequester() {
	m.requester = nil
}

// SetMissionID sets the "mission_id" field.
func (m *RequestMutation) SetMissionID(s string) {
	m.mission_id = &s
}

// MissionID returns the value of the "mission_id" field in the mutation.
func (m *RequestMutation) MissionID() (r string, exists bool) {
	v := m.mission_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMissionID returns the old "mission_id" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldMissionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMissionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMissionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMissionID: %w", err)
	}
	return oldValue.MissionID, nil
}

// ResetMissionID resets all changes to the "mission_id" field.
func (m *RequestMutation) ResetMissionID() {
	m.mission_id = nil
}

// SetMissionID sets the "mission" edge to the Mission entity by id.
func (m *RequestMutation) SetMissionID(id string) {
	m.mission = &id
}

// ClearMission clears the "mission" edge to the Mission entity.
func (m *RequestMutation) ClearMission() {
	m.clearedmission = true
}

// MissionCleared reports if the "mission" edge to the Mission entity was cleared.
func (m *RequestMutation) MissionCleared() bool {
	return m.clearedmission
}

// MissionID returns the "mission" edge ID in the mutation.
func (m *RequestMutation) MissionID() (id string, exists bool) {
	if m.mission != nil {
		return *m.mission, true
	}
	return
}

// MissionIDs returns the "mission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MissionID instead. It exists only for internal usage by the builders.
func (m *RequestMutation) MissionIDs() (ids []string) {
	if id := m.mission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMission resets all changes to the "mission" edge.
func (m *RequestMutation) ResetMission() {
	m.mission = nil
	m.clearedmission = false
}

// Where appends a list predicates to the RequestMutation builder.
func (m *RequestMutation) Where(ps ...predicate.Request) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Request, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Request).
func (m *RequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RequestMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.reason != nil {
		fields = append(fields, request.FieldReason)
	}
	if m.requester != nil {
		fields = append(fields, request.FieldRequester)
	}
	if m.mission_id != nil {
		fields = append(fields, request.FieldMissionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case request.FieldReason:
		return m.Reason()
	case request.FieldRequester:
		return m.Requester()
	case request.FieldMissionID:
		return m.MissionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case request.FieldReason:
		return m.OldReason(ctx)
	case request.FieldRequester:
		return m.OldRequester(ctx)
	case request.FieldMissionID:
		return m.OldMissionID(ctx)
	}
	return nil, fmt.Errorf("unknown Request field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case request.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case request.FieldRequester:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequester(v)
		return nil
	case request.FieldMissionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMissionID(v)
		return nil
	}
	return fmt.Errorf("unknown Request field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Request numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RequestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RequestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Request nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RequestMutation) ResetField(name string) error {
	switch name {
	case request.FieldReason:
		m.ResetReason()
		return nil
	case request.FieldRequester:
		m.ResetRequester()
		return nil
	case request.FieldMissionID:
		m.ResetMissionID()
		return nil
	}
	return fmt.Errorf("unknown Request field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.mission != nil {
		edges = append(edges, request.EdgeMission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case request.EdgeMission:
		if id := m.mission; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RequestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmission {
		edges = append(edges, request.EdgeMission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RequestMutation) EdgeCleared(name string) bool {
	switch name {
	case request.EdgeMission:
		return m.clearedmission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RequestMutation) ClearEdge(name string) error {
	switch name {
	case request.EdgeMission:
		m.ClearMission()
		return nil
	}
	return fmt.Errorf("unknown Request unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RequestMutation) ResetEdge(name string) error {
	switch name {
	case request.EdgeMission:
		m.ResetMission()
		return nil
	}
	return fmt.Errorf("unknown Request edge %s", name)
}

// RocketMutation represents an operation that mutates the Rocket nodes in the graph.
type RocketMutation struct {
	config
	op              Op
	typ             string
	id              *string
	description     *string
	image           *string
	_config         *map[string]string
	clearedFields   map[string]struct{}
	missions        map[string]struct{}
	removedmissions map[string]struct{}
	clearedmissions bool
	done            bool
	oldValue        func(context.Context) (*Rocket, error)
	predicates      []predicate.Rocket
}

var _ ent.Mutation = (*RocketMutation)(nil)

// rocketOption allows management of the mutation configuration using functional options.
type rocketOption func(*RocketMutation)

// newRocketMutation creates new mutation for the Rocket entity.
func newRocketMutation(c config, op Op, opts ...rocketOption) *RocketMutation {
	m := &RocketMutation{
		config:        c,
		op:            op,
		typ:           TypeRocket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRocketID sets the ID field of the mutation.
func withRocketID(id string) rocketOption {
	return func(m *RocketMutation) {
		var (
			err   error
			once  sync.Once
			value *Rocket
		)
		m.oldValue = func(ctx context.Context) (*Rocket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rocket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRocket sets the old Rocket of the mutation.
func withRocket(node *Rocket) rocketOption {
	return func(m *RocketMutation) {
		m.oldValue = func(context.Context) (*Rocket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RocketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RocketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Rocket entities.
func (m *RocketMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RocketMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RocketMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rocket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *RocketMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RocketMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Rocket entity.
// If the Rocket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RocketMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RocketMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[rocket.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RocketMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[rocket.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RocketMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, rocket.FieldDescription)
}

// SetImage sets the "image" field.
func (m *RocketMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *RocketMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Rocket entity.
// If the Rocket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RocketMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *RocketMutation) ResetImage() {
	m.image = nil
}

// SetConfig sets the "config" field.
func (m *RocketMutation) SetConfig(value map[string]string) {
	m._config = &value
}

// Config returns the value of the "config" field in the mutation.
func (m *RocketMutation) Config() (r map[string]string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Rocket entity.
// If the Rocket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RocketMutation) OldConfig(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *RocketMutation) ResetConfig() {
	m._config = nil
}

// AddMissionIDs adds the "missions" edge to the Mission entity by ids.
func (m *RocketMutation) AddMissionIDs(ids ...string) {
	if m.missions == nil {
		m.missions = make(map[string]struct{})
	}
	for i := range ids {
		m.missions[ids[i]] = struct{}{}
	}
}

// ClearMissions clears the "missions" edge to the Mission entity.
func (m *RocketMutation) ClearMissions() {
	m.clearedmissions = true
}

// MissionsCleared reports if the "missions" edge to the Mission entity was cleared.
func (m *RocketMutation) MissionsCleared() bool {
	return m.clearedmissions
}

// RemoveMissionIDs removes the "missions" edge to the Mission entity by IDs.
func (m *RocketMutation) RemoveMissionIDs(ids ...string) {
	if m.removedmissions == nil {
		m.removedmissions = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.missions, ids[i])
		m.removedmissions[ids[i]] = struct{}{}
	}
}

// RemovedMissions returns the removed IDs of the "missions" edge to the Mission entity.
func (m *RocketMutation) RemovedMissionsIDs() (ids []string) {
	for id := range m.removedmissions {
		ids = append(ids, id)
	}
	return
}

// MissionsIDs returns the "missions" edge IDs in the mutation.
func (m *RocketMutation) MissionsIDs() (ids []string) {
	for id := range m.missions {
		ids = append(ids, id)
	}
	return
}

// ResetMissions resets all changes to the "missions" edge.
func (m *RocketMutation) ResetMissions() {
	m.missions = nil
	m.clearedmissions = false
	m.removedmissions = nil
}

// Where appends a list predicates to the RocketMutation builder.
func (m *RocketMutation) Where(ps ...predicate.Rocket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RocketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RocketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rocket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RocketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RocketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rocket).
func (m *RocketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RocketMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.description != nil {
		fields = append(fields, rocket.FieldDescription)
	}
	if m.image != nil {
		fields = append(fields, rocket.FieldImage)
	}
	if m._config != nil {
		fields = append(fields, rocket.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RocketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rocket.FieldDescription:
		return m.Description()
	case rocket.FieldImage:
		return m.Image()
	case rocket.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RocketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rocket.FieldDescription:
		return m.OldDescription(ctx)
	case rocket.FieldImage:
		return m.OldImage(ctx)
	case rocket.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown Rocket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RocketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rocket.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case rocket.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case rocket.FieldConfig:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown Rocket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RocketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RocketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RocketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rocket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RocketMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rocket.FieldDescription) {
		fields = append(fields, rocket.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RocketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RocketMutation) ClearField(name string) error {
	switch name {
	case rocket.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Rocket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RocketMutation) ResetField(name string) error {
	switch name {
	case rocket.FieldDescription:
		m.ResetDescription()
		return nil
	case rocket.FieldImage:
		m.ResetImage()
		return nil
	case rocket.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown Rocket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RocketMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.missions != nil {
		edges = append(edges, rocket.EdgeMissions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RocketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rocket.EdgeMissions:
		ids := make([]ent.Value, 0, len(m.missions))
		for id := range m.missions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RocketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmissions != nil {
		edges = append(edges, rocket.EdgeMissions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RocketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rocket.EdgeMissions:
		ids := make([]ent.Value, 0, len(m.removedmissions))
		for id := range m.removedmissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RocketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmissions {
		edges = append(edges, rocket.EdgeMissions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RocketMutation) EdgeCleared(name string) bool {
	switch name {
	case rocket.EdgeMissions:
		return m.clearedmissions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RocketMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rocket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RocketMutation) ResetEdge(name string) error {
	switch name {
	case rocket.EdgeMissions:
		m.ResetMissions()
		return nil
	}
	return fmt.Errorf("unknown Rocket edge %s", name)
}
