// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccessesColumns holds the columns for the "accesses" table.
	AccessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "approved", Type: field.TypeBool},
		{Name: "rolled_back", Type: field.TypeBool, Default: false},
		{Name: "rollback_time", Type: field.TypeTime, Nullable: true},
		{Name: "rollback_reason", Type: field.TypeString, Nullable: true},
		{Name: "end_time", Type: field.TypeTime},
		{Name: "request_id", Type: field.TypeUUID},
		{Name: "access_approvals", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// AccessesTable holds the schema information for the "accesses" table.
	AccessesTable = &schema.Table{
		Name:       "accesses",
		Columns:    AccessesColumns,
		PrimaryKey: []*schema.Column{AccessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accesses_accesses_approvals",
				Columns:    []*schema.Column{AccessesColumns[8]},
				RefColumns: []*schema.Column{AccessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ActionTokensColumns holds the columns for the "action_tokens" table.
	ActionTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "action", Type: field.TypeEnum, Enums: []string{"create", "remove"}},
		{Name: "token", Type: field.TypeString},
		{Name: "expiration", Type: field.TypeTime},
		{Name: "access_id", Type: field.TypeUUID},
	}
	// ActionTokensTable holds the schema information for the "action_tokens" table.
	ActionTokensTable = &schema.Table{
		Name:       "action_tokens",
		Columns:    ActionTokensColumns,
		PrimaryKey: []*schema.Column{ActionTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "action_tokens_accesses_accessTokens",
				Columns:    []*schema.Column{ActionTokensColumns[4]},
				RefColumns: []*schema.Column{AccessesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "key", Type: field.TypeString},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
	}
	// ApprovalsColumns holds the columns for the "approvals" table.
	ApprovalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "person", Type: field.TypeString},
		{Name: "approved_time", Type: field.TypeTime},
		{Name: "approved", Type: field.TypeBool},
		{Name: "revoked", Type: field.TypeBool, Default: false},
		{Name: "revoked_time", Type: field.TypeTime, Nullable: true},
		{Name: "request_id", Type: field.TypeUUID},
		{Name: "approval_requests", Type: field.TypeUUID},
	}
	// ApprovalsTable holds the schema information for the "approvals" table.
	ApprovalsTable = &schema.Table{
		Name:       "approvals",
		Columns:    ApprovalsColumns,
		PrimaryKey: []*schema.Column{ApprovalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "approvals_requests_requests",
				Columns:    []*schema.Column{ApprovalsColumns[7]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AuditsColumns holds the columns for the "audits" table.
	AuditsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "action", Type: field.TypeEnum, Enums: []string{"ApproveRequest", "RevokeApprovalRequest", "RejectRequest", "CreateAccess", "RemoveAccess"}},
		{Name: "author", Type: field.TypeString},
		{Name: "timestamp", Type: field.TypeTime},
	}
	// AuditsTable holds the schema information for the "audits" table.
	AuditsTable = &schema.Table{
		Name:       "audits",
		Columns:    AuditsColumns,
		PrimaryKey: []*schema.Column{AuditsColumns[0]},
	}
	// MissionsColumns holds the columns for the "missions" table.
	MissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "min_approvers", Type: field.TypeInt},
		{Name: "possible_approvers", Type: field.TypeJSON},
	}
	// MissionsTable holds the schema information for the "missions" table.
	MissionsTable = &schema.Table{
		Name:       "missions",
		Columns:    MissionsColumns,
		PrimaryKey: []*schema.Column{MissionsColumns[0]},
	}
	// RequestsColumns holds the columns for the "requests" table.
	RequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "reason", Type: field.TypeString},
		{Name: "requester", Type: field.TypeString},
		{Name: "rocket_config", Type: field.TypeJSON},
		{Name: "mission_requests", Type: field.TypeString},
	}
	// RequestsTable holds the schema information for the "requests" table.
	RequestsTable = &schema.Table{
		Name:       "requests",
		Columns:    RequestsColumns,
		PrimaryKey: []*schema.Column{RequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "requests_missions_requests",
				Columns:    []*schema.Column{RequestsColumns[4]},
				RefColumns: []*schema.Column{MissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RocketsColumns holds the columns for the "rockets" table.
	RocketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "zip", Type: field.TypeString, Nullable: true},
		{Name: "config", Type: field.TypeJSON},
	}
	// RocketsTable holds the schema information for the "rockets" table.
	RocketsTable = &schema.Table{
		Name:       "rockets",
		Columns:    RocketsColumns,
		PrimaryKey: []*schema.Column{RocketsColumns[0]},
	}
	// RocketMissionsColumns holds the columns for the "rocket_missions" table.
	RocketMissionsColumns = []*schema.Column{
		{Name: "rocket_id", Type: field.TypeString},
		{Name: "mission_id", Type: field.TypeString},
	}
	// RocketMissionsTable holds the schema information for the "rocket_missions" table.
	RocketMissionsTable = &schema.Table{
		Name:       "rocket_missions",
		Columns:    RocketMissionsColumns,
		PrimaryKey: []*schema.Column{RocketMissionsColumns[0], RocketMissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rocket_missions_rocket_id",
				Columns:    []*schema.Column{RocketMissionsColumns[0]},
				RefColumns: []*schema.Column{RocketsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "rocket_missions_mission_id",
				Columns:    []*schema.Column{RocketMissionsColumns[1]},
				RefColumns: []*schema.Column{MissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccessesTable,
		ActionTokensTable,
		APIKeysTable,
		ApprovalsTable,
		AuditsTable,
		MissionsTable,
		RequestsTable,
		RocketsTable,
		RocketMissionsTable,
	}
)

func init() {
	AccessesTable.ForeignKeys[0].RefTable = AccessesTable
	ActionTokensTable.ForeignKeys[0].RefTable = AccessesTable
	ApprovalsTable.ForeignKeys[0].RefTable = RequestsTable
	RequestsTable.ForeignKeys[0].RefTable = MissionsTable
	RocketMissionsTable.ForeignKeys[0].RefTable = RocketsTable
	RocketMissionsTable.ForeignKeys[1].RefTable = MissionsTable
}
