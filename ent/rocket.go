// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/orbit-ops/mission-control/ent/rocket"
)

// Rocket is the model entity for the Rocket schema.
type Rocket struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]string `json:"config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RocketQuery when eager-loading is set.
	Edges        RocketEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RocketEdges holds the relations/edges for other nodes in the graph.
type RocketEdges struct {
	// Missions holds the value of the missions edge.
	Missions []*Mission `json:"missions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes   [1]bool
	namedMissions map[string][]*Mission
}

// MissionsOrErr returns the Missions value or an error if the edge
// was not loaded in eager-loading.
func (e RocketEdges) MissionsOrErr() ([]*Mission, error) {
	if e.loadedTypes[0] {
		return e.Missions, nil
	}
	return nil, &NotLoadedError{edge: "missions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rocket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rocket.FieldConfig:
			values[i] = new([]byte)
		case rocket.FieldID, rocket.FieldDescription, rocket.FieldImage:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rocket fields.
func (r *Rocket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rocket.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case rocket.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case rocket.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				r.Image = value.String
			}
		case rocket.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rocket.
// This includes values selected through modifiers, order, etc.
func (r *Rocket) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryMissions queries the "missions" edge of the Rocket entity.
func (r *Rocket) QueryMissions() *MissionQuery {
	return NewRocketClient(r.config).QueryMissions(r)
}

// Update returns a builder for updating this Rocket.
// Note that you need to call Rocket.Unwrap() before calling this method if this Rocket
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rocket) Update() *RocketUpdateOne {
	return NewRocketClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rocket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rocket) Unwrap() *Rocket {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rocket is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rocket) String() string {
	var builder strings.Builder
	builder.WriteString("Rocket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(r.Image)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", r.Config))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMissions returns the Missions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Rocket) NamedMissions(name string) ([]*Mission, error) {
	if r.Edges.namedMissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedMissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Rocket) appendNamedMissions(name string, edges ...*Mission) {
	if r.Edges.namedMissions == nil {
		r.Edges.namedMissions = make(map[string][]*Mission)
	}
	if len(edges) == 0 {
		r.Edges.namedMissions[name] = []*Mission{}
	} else {
		r.Edges.namedMissions[name] = append(r.Edges.namedMissions[name], edges...)
	}
}

// Rockets is a parsable slice of Rocket.
type Rockets []*Rocket
