// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/rocket"
)

// Rocket is the model entity for the Rocket schema.
type Rocket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Config holds the value of the "config" field.
	Config          map[string]string `json:"config,omitempty"`
	mission_rockets *uuid.UUID
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rocket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rocket.FieldConfig:
			values[i] = new([]byte)
		case rocket.FieldName, rocket.FieldDescription, rocket.FieldCode:
			values[i] = new(sql.NullString)
		case rocket.FieldID:
			values[i] = new(uuid.UUID)
		case rocket.ForeignKeys[0]: // mission_rockets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rocket fields.
func (r *Rocket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rocket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case rocket.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case rocket.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case rocket.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				r.Code = value.String
			}
		case rocket.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case rocket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field mission_rockets", values[i])
			} else if value.Valid {
				r.mission_rockets = new(uuid.UUID)
				*r.mission_rockets = *value.S.(*uuid.UUID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rocket.
// This includes values selected through modifiers, order, etc.
func (r *Rocket) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Rocket.
// Note that you need to call Rocket.Unwrap() before calling this method if this Rocket
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rocket) Update() *RocketUpdateOne {
	return NewRocketClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rocket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rocket) Unwrap() *Rocket {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rocket is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rocket) String() string {
	var builder strings.Builder
	builder.WriteString("Rocket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(r.Code)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", r.Config))
	builder.WriteByte(')')
	return builder.String()
}

// Rockets is a parsable slice of Rocket.
type Rockets []*Rocket
