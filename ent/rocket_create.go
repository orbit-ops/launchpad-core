// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/rocket"
)

// RocketCreate is the builder for creating a Rocket entity.
type RocketCreate struct {
	config
	mutation *RocketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rc *RocketCreate) SetName(s string) *RocketCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RocketCreate) SetDescription(s string) *RocketCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RocketCreate) SetNillableDescription(s *string) *RocketCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetCode sets the "code" field.
func (rc *RocketCreate) SetCode(s string) *RocketCreate {
	rc.mutation.SetCode(s)
	return rc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (rc *RocketCreate) SetNillableCode(s *string) *RocketCreate {
	if s != nil {
		rc.SetCode(*s)
	}
	return rc
}

// SetConfig sets the "config" field.
func (rc *RocketCreate) SetConfig(m map[string]string) *RocketCreate {
	rc.mutation.SetConfig(m)
	return rc
}

// SetID sets the "id" field.
func (rc *RocketCreate) SetID(u uuid.UUID) *RocketCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RocketCreate) SetNillableID(u *uuid.UUID) *RocketCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// Mutation returns the RocketMutation object of the builder.
func (rc *RocketCreate) Mutation() *RocketMutation {
	return rc.mutation
}

// Save creates the Rocket in the database.
func (rc *RocketCreate) Save(ctx context.Context) (*Rocket, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RocketCreate) SaveX(ctx context.Context) *Rocket {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RocketCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RocketCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RocketCreate) defaults() {
	if _, ok := rc.mutation.Config(); !ok {
		v := rocket.DefaultConfig
		rc.mutation.SetConfig(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := rocket.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RocketCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Rocket.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := rocket.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Rocket.name": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Code(); ok {
		if err := rocket.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Rocket.code": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "Rocket.config"`)}
	}
	return nil
}

func (rc *RocketCreate) sqlSave(ctx context.Context) (*Rocket, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RocketCreate) createSpec() (*Rocket, *sqlgraph.CreateSpec) {
	var (
		_node = &Rocket{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(rocket.Table, sqlgraph.NewFieldSpec(rocket.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(rocket.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(rocket.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.Code(); ok {
		_spec.SetField(rocket.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := rc.mutation.Config(); ok {
		_spec.SetField(rocket.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rocket.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RocketUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rc *RocketCreate) OnConflict(opts ...sql.ConflictOption) *RocketUpsertOne {
	rc.conflict = opts
	return &RocketUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rocket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RocketCreate) OnConflictColumns(columns ...string) *RocketUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RocketUpsertOne{
		create: rc,
	}
}

type (
	// RocketUpsertOne is the builder for "upsert"-ing
	//  one Rocket node.
	RocketUpsertOne struct {
		create *RocketCreate
	}

	// RocketUpsert is the "OnConflict" setter.
	RocketUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *RocketUpsert) SetName(v string) *RocketUpsert {
	u.Set(rocket.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RocketUpsert) UpdateName() *RocketUpsert {
	u.SetExcluded(rocket.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *RocketUpsert) SetDescription(v string) *RocketUpsert {
	u.Set(rocket.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RocketUpsert) UpdateDescription() *RocketUpsert {
	u.SetExcluded(rocket.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *RocketUpsert) ClearDescription() *RocketUpsert {
	u.SetNull(rocket.FieldDescription)
	return u
}

// SetCode sets the "code" field.
func (u *RocketUpsert) SetCode(v string) *RocketUpsert {
	u.Set(rocket.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RocketUpsert) UpdateCode() *RocketUpsert {
	u.SetExcluded(rocket.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *RocketUpsert) ClearCode() *RocketUpsert {
	u.SetNull(rocket.FieldCode)
	return u
}

// SetConfig sets the "config" field.
func (u *RocketUpsert) SetConfig(v map[string]string) *RocketUpsert {
	u.Set(rocket.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *RocketUpsert) UpdateConfig() *RocketUpsert {
	u.SetExcluded(rocket.FieldConfig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Rocket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rocket.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RocketUpsertOne) UpdateNewValues() *RocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rocket.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rocket.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RocketUpsertOne) Ignore() *RocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RocketUpsertOne) DoNothing() *RocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RocketCreate.OnConflict
// documentation for more info.
func (u *RocketUpsertOne) Update(set func(*RocketUpsert)) *RocketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RocketUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RocketUpsertOne) SetName(v string) *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RocketUpsertOne) UpdateName() *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *RocketUpsertOne) SetDescription(v string) *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RocketUpsertOne) UpdateDescription() *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RocketUpsertOne) ClearDescription() *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.ClearDescription()
	})
}

// SetCode sets the "code" field.
func (u *RocketUpsertOne) SetCode(v string) *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RocketUpsertOne) UpdateCode() *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *RocketUpsertOne) ClearCode() *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.ClearCode()
	})
}

// SetConfig sets the "config" field.
func (u *RocketUpsertOne) SetConfig(v map[string]string) *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *RocketUpsertOne) UpdateConfig() *RocketUpsertOne {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateConfig()
	})
}

// Exec executes the query.
func (u *RocketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RocketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RocketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RocketUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RocketUpsertOne.ID is not supported by MySQL driver. Use RocketUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RocketUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RocketCreateBulk is the builder for creating many Rocket entities in bulk.
type RocketCreateBulk struct {
	config
	err      error
	builders []*RocketCreate
	conflict []sql.ConflictOption
}

// Save creates the Rocket entities in the database.
func (rcb *RocketCreateBulk) Save(ctx context.Context) ([]*Rocket, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rocket, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RocketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RocketCreateBulk) SaveX(ctx context.Context) []*Rocket {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RocketCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RocketCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rocket.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RocketUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rcb *RocketCreateBulk) OnConflict(opts ...sql.ConflictOption) *RocketUpsertBulk {
	rcb.conflict = opts
	return &RocketUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rocket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RocketCreateBulk) OnConflictColumns(columns ...string) *RocketUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RocketUpsertBulk{
		create: rcb,
	}
}

// RocketUpsertBulk is the builder for "upsert"-ing
// a bulk of Rocket nodes.
type RocketUpsertBulk struct {
	create *RocketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rocket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rocket.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RocketUpsertBulk) UpdateNewValues() *RocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rocket.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rocket.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RocketUpsertBulk) Ignore() *RocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RocketUpsertBulk) DoNothing() *RocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RocketCreateBulk.OnConflict
// documentation for more info.
func (u *RocketUpsertBulk) Update(set func(*RocketUpsert)) *RocketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RocketUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RocketUpsertBulk) SetName(v string) *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RocketUpsertBulk) UpdateName() *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *RocketUpsertBulk) SetDescription(v string) *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RocketUpsertBulk) UpdateDescription() *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RocketUpsertBulk) ClearDescription() *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.ClearDescription()
	})
}

// SetCode sets the "code" field.
func (u *RocketUpsertBulk) SetCode(v string) *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *RocketUpsertBulk) UpdateCode() *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *RocketUpsertBulk) ClearCode() *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.ClearCode()
	})
}

// SetConfig sets the "config" field.
func (u *RocketUpsertBulk) SetConfig(v map[string]string) *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *RocketUpsertBulk) UpdateConfig() *RocketUpsertBulk {
	return u.Update(func(s *RocketUpsert) {
		s.UpdateConfig()
	})
}

// Exec executes the query.
func (u *RocketUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RocketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RocketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RocketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
