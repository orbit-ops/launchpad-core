// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/access"
)

// Access is the model entity for the Access schema.
type Access struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// RolledBack holds the value of the "rolled_back" field.
	RolledBack bool `json:"rolled_back,omitempty"`
	// RollbackTime holds the value of the "rollback_time" field.
	RollbackTime time.Time `json:"rollback_time,omitempty"`
	// RollbackReason holds the value of the "rollback_reason" field.
	RollbackReason string `json:"rollback_reason,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID uuid.UUID `json:"request_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessQuery when eager-loading is set.
	Edges            AccessEdges `json:"edges"`
	access_approvals *uuid.UUID
	selectValues     sql.SelectValues
}

// AccessEdges holds the relations/edges for other nodes in the graph.
type AccessEdges struct {
	// Approvals holds the value of the approvals edge.
	Approvals *Access `json:"approvals,omitempty"`
	// AccessTokens holds the value of the accessTokens edge.
	AccessTokens []*ActionTokens `json:"accessTokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes       [2]bool
	namedAccessTokens map[string][]*ActionTokens
}

// ApprovalsOrErr returns the Approvals value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccessEdges) ApprovalsOrErr() (*Access, error) {
	if e.loadedTypes[0] {
		if e.Approvals == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: access.Label}
		}
		return e.Approvals, nil
	}
	return nil, &NotLoadedError{edge: "approvals"}
}

// AccessTokensOrErr returns the AccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e AccessEdges) AccessTokensOrErr() ([]*ActionTokens, error) {
	if e.loadedTypes[1] {
		return e.AccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "accessTokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Access) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case access.FieldApproved, access.FieldRolledBack:
			values[i] = new(sql.NullBool)
		case access.FieldRollbackReason:
			values[i] = new(sql.NullString)
		case access.FieldStartTime, access.FieldRollbackTime, access.FieldEndTime:
			values[i] = new(sql.NullTime)
		case access.FieldID, access.FieldRequestID:
			values[i] = new(uuid.UUID)
		case access.ForeignKeys[0]: // access_approvals
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Access fields.
func (a *Access) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case access.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case access.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				a.StartTime = value.Time
			}
		case access.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				a.Approved = value.Bool
			}
		case access.FieldRolledBack:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rolled_back", values[i])
			} else if value.Valid {
				a.RolledBack = value.Bool
			}
		case access.FieldRollbackTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field rollback_time", values[i])
			} else if value.Valid {
				a.RollbackTime = value.Time
			}
		case access.FieldRollbackReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rollback_reason", values[i])
			} else if value.Valid {
				a.RollbackReason = value.String
			}
		case access.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				a.EndTime = value.Time
			}
		case access.FieldRequestID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value != nil {
				a.RequestID = *value
			}
		case access.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field access_approvals", values[i])
			} else if value.Valid {
				a.access_approvals = new(uuid.UUID)
				*a.access_approvals = *value.S.(*uuid.UUID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Access.
// This includes values selected through modifiers, order, etc.
func (a *Access) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryApprovals queries the "approvals" edge of the Access entity.
func (a *Access) QueryApprovals() *AccessQuery {
	return NewAccessClient(a.config).QueryApprovals(a)
}

// QueryAccessTokens queries the "accessTokens" edge of the Access entity.
func (a *Access) QueryAccessTokens() *ActionTokensQuery {
	return NewAccessClient(a.config).QueryAccessTokens(a)
}

// Update returns a builder for updating this Access.
// Note that you need to call Access.Unwrap() before calling this method if this Access
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Access) Update() *AccessUpdateOne {
	return NewAccessClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Access entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Access) Unwrap() *Access {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Access is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Access) String() string {
	var builder strings.Builder
	builder.WriteString("Access(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("start_time=")
	builder.WriteString(a.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", a.Approved))
	builder.WriteString(", ")
	builder.WriteString("rolled_back=")
	builder.WriteString(fmt.Sprintf("%v", a.RolledBack))
	builder.WriteString(", ")
	builder.WriteString("rollback_time=")
	builder.WriteString(a.RollbackTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rollback_reason=")
	builder.WriteString(a.RollbackReason)
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(a.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", a.RequestID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAccessTokens returns the AccessTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Access) NamedAccessTokens(name string) ([]*ActionTokens, error) {
	if a.Edges.namedAccessTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedAccessTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Access) appendNamedAccessTokens(name string, edges ...*ActionTokens) {
	if a.Edges.namedAccessTokens == nil {
		a.Edges.namedAccessTokens = make(map[string][]*ActionTokens)
	}
	if len(edges) == 0 {
		a.Edges.namedAccessTokens[name] = []*ActionTokens{}
	} else {
		a.Edges.namedAccessTokens[name] = append(a.Edges.namedAccessTokens[name], edges...)
	}
}

// Accesses is a parsable slice of Access.
type Accesses []*Access
