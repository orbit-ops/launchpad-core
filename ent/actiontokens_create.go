// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/access"
	"github.com/orbit-ops/launchpad-core/ent/actiontokens"
)

// ActionTokensCreate is the builder for creating a ActionTokens entity.
type ActionTokensCreate struct {
	config
	mutation *ActionTokensMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAction sets the "action" field.
func (atc *ActionTokensCreate) SetAction(a actiontokens.Action) *ActionTokensCreate {
	atc.mutation.SetAction(a)
	return atc
}

// SetToken sets the "token" field.
func (atc *ActionTokensCreate) SetToken(s string) *ActionTokensCreate {
	atc.mutation.SetToken(s)
	return atc
}

// SetAccessID sets the "access_id" field.
func (atc *ActionTokensCreate) SetAccessID(u uuid.UUID) *ActionTokensCreate {
	atc.mutation.SetAccessID(u)
	return atc
}

// SetExpiration sets the "expiration" field.
func (atc *ActionTokensCreate) SetExpiration(t time.Time) *ActionTokensCreate {
	atc.mutation.SetExpiration(t)
	return atc
}

// SetID sets the "id" field.
func (atc *ActionTokensCreate) SetID(u uuid.UUID) *ActionTokensCreate {
	atc.mutation.SetID(u)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *ActionTokensCreate) SetNillableID(u *uuid.UUID) *ActionTokensCreate {
	if u != nil {
		atc.SetID(*u)
	}
	return atc
}

// SetAccessTokensID sets the "accessTokens" edge to the Access entity by ID.
func (atc *ActionTokensCreate) SetAccessTokensID(id uuid.UUID) *ActionTokensCreate {
	atc.mutation.SetAccessTokensID(id)
	return atc
}

// SetAccessTokens sets the "accessTokens" edge to the Access entity.
func (atc *ActionTokensCreate) SetAccessTokens(a *Access) *ActionTokensCreate {
	return atc.SetAccessTokensID(a.ID)
}

// Mutation returns the ActionTokensMutation object of the builder.
func (atc *ActionTokensCreate) Mutation() *ActionTokensMutation {
	return atc.mutation
}

// Save creates the ActionTokens in the database.
func (atc *ActionTokensCreate) Save(ctx context.Context) (*ActionTokens, error) {
	atc.defaults()
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *ActionTokensCreate) SaveX(ctx context.Context) *ActionTokens {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *ActionTokensCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *ActionTokensCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *ActionTokensCreate) defaults() {
	if _, ok := atc.mutation.ID(); !ok {
		v := actiontokens.DefaultID()
		atc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *ActionTokensCreate) check() error {
	if _, ok := atc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "ActionTokens.action"`)}
	}
	if v, ok := atc.mutation.Action(); ok {
		if err := actiontokens.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "ActionTokens.action": %w`, err)}
		}
	}
	if _, ok := atc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "ActionTokens.token"`)}
	}
	if _, ok := atc.mutation.AccessID(); !ok {
		return &ValidationError{Name: "access_id", err: errors.New(`ent: missing required field "ActionTokens.access_id"`)}
	}
	if _, ok := atc.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`ent: missing required field "ActionTokens.expiration"`)}
	}
	if _, ok := atc.mutation.AccessTokensID(); !ok {
		return &ValidationError{Name: "accessTokens", err: errors.New(`ent: missing required edge "ActionTokens.accessTokens"`)}
	}
	return nil
}

func (atc *ActionTokensCreate) sqlSave(ctx context.Context) (*ActionTokens, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *ActionTokensCreate) createSpec() (*ActionTokens, *sqlgraph.CreateSpec) {
	var (
		_node = &ActionTokens{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(actiontokens.Table, sqlgraph.NewFieldSpec(actiontokens.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = atc.conflict
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := atc.mutation.Action(); ok {
		_spec.SetField(actiontokens.FieldAction, field.TypeEnum, value)
		_node.Action = value
	}
	if value, ok := atc.mutation.Token(); ok {
		_spec.SetField(actiontokens.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := atc.mutation.Expiration(); ok {
		_spec.SetField(actiontokens.FieldExpiration, field.TypeTime, value)
		_node.Expiration = value
	}
	if nodes := atc.mutation.AccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   actiontokens.AccessTokensTable,
			Columns: []string{actiontokens.AccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(access.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccessID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActionTokens.Create().
//		SetAction(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActionTokensUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (atc *ActionTokensCreate) OnConflict(opts ...sql.ConflictOption) *ActionTokensUpsertOne {
	atc.conflict = opts
	return &ActionTokensUpsertOne{
		create: atc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActionTokens.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atc *ActionTokensCreate) OnConflictColumns(columns ...string) *ActionTokensUpsertOne {
	atc.conflict = append(atc.conflict, sql.ConflictColumns(columns...))
	return &ActionTokensUpsertOne{
		create: atc,
	}
}

type (
	// ActionTokensUpsertOne is the builder for "upsert"-ing
	//  one ActionTokens node.
	ActionTokensUpsertOne struct {
		create *ActionTokensCreate
	}

	// ActionTokensUpsert is the "OnConflict" setter.
	ActionTokensUpsert struct {
		*sql.UpdateSet
	}
)

// SetToken sets the "token" field.
func (u *ActionTokensUpsert) SetToken(v string) *ActionTokensUpsert {
	u.Set(actiontokens.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *ActionTokensUpsert) UpdateToken() *ActionTokensUpsert {
	u.SetExcluded(actiontokens.FieldToken)
	return u
}

// SetAccessID sets the "access_id" field.
func (u *ActionTokensUpsert) SetAccessID(v uuid.UUID) *ActionTokensUpsert {
	u.Set(actiontokens.FieldAccessID, v)
	return u
}

// UpdateAccessID sets the "access_id" field to the value that was provided on create.
func (u *ActionTokensUpsert) UpdateAccessID() *ActionTokensUpsert {
	u.SetExcluded(actiontokens.FieldAccessID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ActionTokens.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(actiontokens.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActionTokensUpsertOne) UpdateNewValues() *ActionTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(actiontokens.FieldID)
		}
		if _, exists := u.create.mutation.Action(); exists {
			s.SetIgnore(actiontokens.FieldAction)
		}
		if _, exists := u.create.mutation.Expiration(); exists {
			s.SetIgnore(actiontokens.FieldExpiration)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActionTokens.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActionTokensUpsertOne) Ignore() *ActionTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActionTokensUpsertOne) DoNothing() *ActionTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActionTokensCreate.OnConflict
// documentation for more info.
func (u *ActionTokensUpsertOne) Update(set func(*ActionTokensUpsert)) *ActionTokensUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActionTokensUpsert{UpdateSet: update})
	}))
	return u
}

// SetToken sets the "token" field.
func (u *ActionTokensUpsertOne) SetToken(v string) *ActionTokensUpsertOne {
	return u.Update(func(s *ActionTokensUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *ActionTokensUpsertOne) UpdateToken() *ActionTokensUpsertOne {
	return u.Update(func(s *ActionTokensUpsert) {
		s.UpdateToken()
	})
}

// SetAccessID sets the "access_id" field.
func (u *ActionTokensUpsertOne) SetAccessID(v uuid.UUID) *ActionTokensUpsertOne {
	return u.Update(func(s *ActionTokensUpsert) {
		s.SetAccessID(v)
	})
}

// UpdateAccessID sets the "access_id" field to the value that was provided on create.
func (u *ActionTokensUpsertOne) UpdateAccessID() *ActionTokensUpsertOne {
	return u.Update(func(s *ActionTokensUpsert) {
		s.UpdateAccessID()
	})
}

// Exec executes the query.
func (u *ActionTokensUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActionTokensCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActionTokensUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActionTokensUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ActionTokensUpsertOne.ID is not supported by MySQL driver. Use ActionTokensUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActionTokensUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActionTokensCreateBulk is the builder for creating many ActionTokens entities in bulk.
type ActionTokensCreateBulk struct {
	config
	err      error
	builders []*ActionTokensCreate
	conflict []sql.ConflictOption
}

// Save creates the ActionTokens entities in the database.
func (atcb *ActionTokensCreateBulk) Save(ctx context.Context) ([]*ActionTokens, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*ActionTokens, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActionTokensMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = atcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *ActionTokensCreateBulk) SaveX(ctx context.Context) []*ActionTokens {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *ActionTokensCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *ActionTokensCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActionTokens.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActionTokensUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (atcb *ActionTokensCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActionTokensUpsertBulk {
	atcb.conflict = opts
	return &ActionTokensUpsertBulk{
		create: atcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActionTokens.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atcb *ActionTokensCreateBulk) OnConflictColumns(columns ...string) *ActionTokensUpsertBulk {
	atcb.conflict = append(atcb.conflict, sql.ConflictColumns(columns...))
	return &ActionTokensUpsertBulk{
		create: atcb,
	}
}

// ActionTokensUpsertBulk is the builder for "upsert"-ing
// a bulk of ActionTokens nodes.
type ActionTokensUpsertBulk struct {
	create *ActionTokensCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ActionTokens.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(actiontokens.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActionTokensUpsertBulk) UpdateNewValues() *ActionTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(actiontokens.FieldID)
			}
			if _, exists := b.mutation.Action(); exists {
				s.SetIgnore(actiontokens.FieldAction)
			}
			if _, exists := b.mutation.Expiration(); exists {
				s.SetIgnore(actiontokens.FieldExpiration)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActionTokens.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActionTokensUpsertBulk) Ignore() *ActionTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActionTokensUpsertBulk) DoNothing() *ActionTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActionTokensCreateBulk.OnConflict
// documentation for more info.
func (u *ActionTokensUpsertBulk) Update(set func(*ActionTokensUpsert)) *ActionTokensUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActionTokensUpsert{UpdateSet: update})
	}))
	return u
}

// SetToken sets the "token" field.
func (u *ActionTokensUpsertBulk) SetToken(v string) *ActionTokensUpsertBulk {
	return u.Update(func(s *ActionTokensUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *ActionTokensUpsertBulk) UpdateToken() *ActionTokensUpsertBulk {
	return u.Update(func(s *ActionTokensUpsert) {
		s.UpdateToken()
	})
}

// SetAccessID sets the "access_id" field.
func (u *ActionTokensUpsertBulk) SetAccessID(v uuid.UUID) *ActionTokensUpsertBulk {
	return u.Update(func(s *ActionTokensUpsert) {
		s.SetAccessID(v)
	})
}

// UpdateAccessID sets the "access_id" field to the value that was provided on create.
func (u *ActionTokensUpsertBulk) UpdateAccessID() *ActionTokensUpsertBulk {
	return u.Update(func(s *ActionTokensUpsert) {
		s.UpdateAccessID()
	})
}

// Exec executes the query.
func (u *ActionTokensUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActionTokensCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActionTokensCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActionTokensUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
