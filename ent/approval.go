// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/orbit-ops/mission-control/ent/approval"
	"github.com/orbit-ops/mission-control/ent/request"
)

// Approval is the model entity for the Approval schema.
type Approval struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Person holds the value of the "person" field.
	Person string `json:"person,omitempty"`
	// ApprovedTime holds the value of the "approved_time" field.
	ApprovedTime time.Time `json:"approved_time,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// Revoked holds the value of the "revoked" field.
	Revoked bool `json:"revoked,omitempty"`
	// RevokedTime holds the value of the "revoked_time" field.
	RevokedTime time.Time `json:"revoked_time,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID uuid.UUID `json:"request_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApprovalQuery when eager-loading is set.
	Edges             ApprovalEdges `json:"edges"`
	approval_requests *uuid.UUID
	selectValues      sql.SelectValues
}

// ApprovalEdges holds the relations/edges for other nodes in the graph.
type ApprovalEdges struct {
	// Requests holds the value of the requests edge.
	Requests *Request `json:"requests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequestsOrErr returns the Requests value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApprovalEdges) RequestsOrErr() (*Request, error) {
	if e.loadedTypes[0] {
		if e.Requests == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: request.Label}
		}
		return e.Requests, nil
	}
	return nil, &NotLoadedError{edge: "requests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Approval) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case approval.FieldApproved, approval.FieldRevoked:
			values[i] = new(sql.NullBool)
		case approval.FieldPerson:
			values[i] = new(sql.NullString)
		case approval.FieldApprovedTime, approval.FieldRevokedTime:
			values[i] = new(sql.NullTime)
		case approval.FieldID, approval.FieldRequestID:
			values[i] = new(uuid.UUID)
		case approval.ForeignKeys[0]: // approval_requests
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Approval fields.
func (a *Approval) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approval.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case approval.FieldPerson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field person", values[i])
			} else if value.Valid {
				a.Person = value.String
			}
		case approval.FieldApprovedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approved_time", values[i])
			} else if value.Valid {
				a.ApprovedTime = value.Time
			}
		case approval.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				a.Approved = value.Bool
			}
		case approval.FieldRevoked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field revoked", values[i])
			} else if value.Valid {
				a.Revoked = value.Bool
			}
		case approval.FieldRevokedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_time", values[i])
			} else if value.Valid {
				a.RevokedTime = value.Time
			}
		case approval.FieldRequestID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value != nil {
				a.RequestID = *value
			}
		case approval.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field approval_requests", values[i])
			} else if value.Valid {
				a.approval_requests = new(uuid.UUID)
				*a.approval_requests = *value.S.(*uuid.UUID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Approval.
// This includes values selected through modifiers, order, etc.
func (a *Approval) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryRequests queries the "requests" edge of the Approval entity.
func (a *Approval) QueryRequests() *RequestQuery {
	return NewApprovalClient(a.config).QueryRequests(a)
}

// Update returns a builder for updating this Approval.
// Note that you need to call Approval.Unwrap() before calling this method if this Approval
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Approval) Update() *ApprovalUpdateOne {
	return NewApprovalClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Approval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Approval) Unwrap() *Approval {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Approval is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Approval) String() string {
	var builder strings.Builder
	builder.WriteString("Approval(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("person=")
	builder.WriteString(a.Person)
	builder.WriteString(", ")
	builder.WriteString("approved_time=")
	builder.WriteString(a.ApprovedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", a.Approved))
	builder.WriteString(", ")
	builder.WriteString("revoked=")
	builder.WriteString(fmt.Sprintf("%v", a.Revoked))
	builder.WriteString(", ")
	builder.WriteString("revoked_time=")
	builder.WriteString(a.RevokedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", a.RequestID))
	builder.WriteByte(')')
	return builder.String()
}

// Approvals is a parsable slice of Approval.
type Approvals []*Approval
