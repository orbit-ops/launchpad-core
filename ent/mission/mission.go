// Code generated by ent, DO NOT EDIT.

package mission

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mission type in the database.
	Label = "mission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldMinApprovers holds the string denoting the min_approvers field in the database.
	FieldMinApprovers = "min_approvers"
	// FieldRocketID holds the string denoting the rocket_id field in the database.
	FieldRocketID = "rocket_id"
	// EdgeRocket holds the string denoting the rocket edge name in mutations.
	EdgeRocket = "rocket"
	// EdgeRequests holds the string denoting the requests edge name in mutations.
	EdgeRequests = "requests"
	// Table holds the table name of the mission in the database.
	Table = "missions"
	// RocketTable is the table that holds the rocket relation/edge.
	RocketTable = "missions"
	// RocketInverseTable is the table name for the Rocket entity.
	// It exists in this package in order to avoid circular dependency with the "rocket" package.
	RocketInverseTable = "rockets"
	// RocketColumn is the table column denoting the rocket relation/edge.
	RocketColumn = "rocket_id"
	// RequestsTable is the table that holds the requests relation/edge.
	RequestsTable = "requests"
	// RequestsInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestsInverseTable = "requests"
	// RequestsColumn is the table column denoting the requests relation/edge.
	RequestsColumn = "mission_requests"
)

// Columns holds all SQL columns for mission fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldImage,
	FieldMinApprovers,
	FieldRocketID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Mission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByMinApprovers orders the results by the min_approvers field.
func ByMinApprovers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinApprovers, opts...).ToFunc()
}

// ByRocketID orders the results by the rocket_id field.
func ByRocketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRocketID, opts...).ToFunc()
}

// ByRocketField orders the results by rocket field.
func ByRocketField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRocketStep(), sql.OrderByField(field, opts...))
	}
}

// ByRequestsCount orders the results by requests count.
func ByRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestsStep(), opts...)
	}
}

// ByRequests orders the results by requests terms.
func ByRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRocketStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RocketInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RocketTable, RocketColumn),
	)
}
func newRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestsTable, RequestsColumn),
	)
}
