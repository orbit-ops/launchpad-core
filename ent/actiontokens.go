// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/access"
	"github.com/orbit-ops/launchpad-core/ent/actiontokens"
)

// ActionTokens is the model entity for the ActionTokens schema.
type ActionTokens struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action actiontokens.Action `json:"action,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// AccessID holds the value of the "access_id" field.
	AccessID uuid.UUID `json:"access_id,omitempty"`
	// Expiration holds the value of the "expiration" field.
	Expiration time.Time `json:"expiration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActionTokensQuery when eager-loading is set.
	Edges        ActionTokensEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ActionTokensEdges holds the relations/edges for other nodes in the graph.
type ActionTokensEdges struct {
	// AccessTokens holds the value of the accessTokens edge.
	AccessTokens *Access `json:"accessTokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccessTokensOrErr returns the AccessTokens value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActionTokensEdges) AccessTokensOrErr() (*Access, error) {
	if e.loadedTypes[0] {
		if e.AccessTokens == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: access.Label}
		}
		return e.AccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "accessTokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionTokens) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case actiontokens.FieldAction, actiontokens.FieldToken:
			values[i] = new(sql.NullString)
		case actiontokens.FieldExpiration:
			values[i] = new(sql.NullTime)
		case actiontokens.FieldID, actiontokens.FieldAccessID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionTokens fields.
func (at *ActionTokens) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actiontokens.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case actiontokens.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				at.Action = actiontokens.Action(value.String)
			}
		case actiontokens.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				at.Token = value.String
			}
		case actiontokens.FieldAccessID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field access_id", values[i])
			} else if value != nil {
				at.AccessID = *value
			}
		case actiontokens.FieldExpiration:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration", values[i])
			} else if value.Valid {
				at.Expiration = value.Time
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActionTokens.
// This includes values selected through modifiers, order, etc.
func (at *ActionTokens) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryAccessTokens queries the "accessTokens" edge of the ActionTokens entity.
func (at *ActionTokens) QueryAccessTokens() *AccessQuery {
	return NewActionTokensClient(at.config).QueryAccessTokens(at)
}

// Update returns a builder for updating this ActionTokens.
// Note that you need to call ActionTokens.Unwrap() before calling this method if this ActionTokens
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *ActionTokens) Update() *ActionTokensUpdateOne {
	return NewActionTokensClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the ActionTokens entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *ActionTokens) Unwrap() *ActionTokens {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActionTokens is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *ActionTokens) String() string {
	var builder strings.Builder
	builder.WriteString("ActionTokens(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", at.Action))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(at.Token)
	builder.WriteString(", ")
	builder.WriteString("access_id=")
	builder.WriteString(fmt.Sprintf("%v", at.AccessID))
	builder.WriteString(", ")
	builder.WriteString("expiration=")
	builder.WriteString(at.Expiration.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActionTokensSlice is a parsable slice of ActionTokens.
type ActionTokensSlice []*ActionTokens
