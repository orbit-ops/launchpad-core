// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/orbit-ops/mission-control/ent"

func NewAccessCreate(e *ent.Access) *AccessCreate {
	if e == nil {
		return nil
	}
	var ret AccessCreate
	ret.ID = e.ID
	ret.AccessTime = e.AccessTime
	ret.Approved = e.Approved
	ret.RolledBack = e.RolledBack
	ret.RollbackTime = NewOptDateTime(e.RollbackTime)
	ret.EndTime = e.EndTime
	ret.RequestID = e.RequestID
	return &ret
}

func NewAccessCreates(es []*ent.Access) []AccessCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessCreate, len(es))
	for i, e := range es {
		r[i] = NewAccessCreate(e).Elem()
	}
	return r
}

func (a *AccessCreate) Elem() AccessCreate {
	if a == nil {
		return AccessCreate{}
	}
	return *a
}

func NewAccessList(e *ent.Access) *AccessList {
	if e == nil {
		return nil
	}
	var ret AccessList
	ret.ID = e.ID
	ret.AccessTime = e.AccessTime
	ret.Approved = e.Approved
	ret.RolledBack = e.RolledBack
	ret.RollbackTime = NewOptDateTime(e.RollbackTime)
	ret.EndTime = e.EndTime
	ret.RequestID = e.RequestID
	return &ret
}

func NewAccessLists(es []*ent.Access) []AccessList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessList, len(es))
	for i, e := range es {
		r[i] = NewAccessList(e).Elem()
	}
	return r
}

func (a *AccessList) Elem() AccessList {
	if a == nil {
		return AccessList{}
	}
	return *a
}

func NewAccessRead(e *ent.Access) *AccessRead {
	if e == nil {
		return nil
	}
	var ret AccessRead
	ret.ID = e.ID
	ret.AccessTime = e.AccessTime
	ret.Approved = e.Approved
	ret.RolledBack = e.RolledBack
	ret.RollbackTime = NewOptDateTime(e.RollbackTime)
	ret.EndTime = e.EndTime
	ret.RequestID = e.RequestID
	return &ret
}

func NewAccessReads(es []*ent.Access) []AccessRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessRead, len(es))
	for i, e := range es {
		r[i] = NewAccessRead(e).Elem()
	}
	return r
}

func (a *AccessRead) Elem() AccessRead {
	if a == nil {
		return AccessRead{}
	}
	return *a
}

func NewAccessUpdate(e *ent.Access) *AccessUpdate {
	if e == nil {
		return nil
	}
	var ret AccessUpdate
	ret.ID = e.ID
	ret.AccessTime = e.AccessTime
	ret.Approved = e.Approved
	ret.RolledBack = e.RolledBack
	ret.RollbackTime = NewOptDateTime(e.RollbackTime)
	ret.EndTime = e.EndTime
	ret.RequestID = e.RequestID
	return &ret
}

func NewAccessUpdates(es []*ent.Access) []AccessUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessUpdate, len(es))
	for i, e := range es {
		r[i] = NewAccessUpdate(e).Elem()
	}
	return r
}

func (a *AccessUpdate) Elem() AccessUpdate {
	if a == nil {
		return AccessUpdate{}
	}
	return *a
}

func NewAccessApprovalsRead(e *ent.Access) *AccessApprovalsRead {
	if e == nil {
		return nil
	}
	var ret AccessApprovalsRead
	ret.ID = e.ID
	ret.AccessTime = e.AccessTime
	ret.Approved = e.Approved
	ret.RolledBack = e.RolledBack
	ret.RollbackTime = NewOptDateTime(e.RollbackTime)
	ret.EndTime = e.EndTime
	ret.RequestID = e.RequestID
	return &ret
}

func NewAccessApprovalsReads(es []*ent.Access) []AccessApprovalsRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessApprovalsRead, len(es))
	for i, e := range es {
		r[i] = NewAccessApprovalsRead(e).Elem()
	}
	return r
}

func (a *AccessApprovalsRead) Elem() AccessApprovalsRead {
	if a == nil {
		return AccessApprovalsRead{}
	}
	return *a
}

func NewApprovalCreate(e *ent.Approval) *ApprovalCreate {
	if e == nil {
		return nil
	}
	var ret ApprovalCreate
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	ret.RequestID = e.RequestID
	return &ret
}

func NewApprovalCreates(es []*ent.Approval) []ApprovalCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalCreate, len(es))
	for i, e := range es {
		r[i] = NewApprovalCreate(e).Elem()
	}
	return r
}

func (a *ApprovalCreate) Elem() ApprovalCreate {
	if a == nil {
		return ApprovalCreate{}
	}
	return *a
}

func NewApprovalList(e *ent.Approval) *ApprovalList {
	if e == nil {
		return nil
	}
	var ret ApprovalList
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	ret.RequestID = e.RequestID
	return &ret
}

func NewApprovalLists(es []*ent.Approval) []ApprovalList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalList, len(es))
	for i, e := range es {
		r[i] = NewApprovalList(e).Elem()
	}
	return r
}

func (a *ApprovalList) Elem() ApprovalList {
	if a == nil {
		return ApprovalList{}
	}
	return *a
}

func NewApprovalRead(e *ent.Approval) *ApprovalRead {
	if e == nil {
		return nil
	}
	var ret ApprovalRead
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	ret.RequestID = e.RequestID
	return &ret
}

func NewApprovalReads(es []*ent.Approval) []ApprovalRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalRead, len(es))
	for i, e := range es {
		r[i] = NewApprovalRead(e).Elem()
	}
	return r
}

func (a *ApprovalRead) Elem() ApprovalRead {
	if a == nil {
		return ApprovalRead{}
	}
	return *a
}

func NewApprovalUpdate(e *ent.Approval) *ApprovalUpdate {
	if e == nil {
		return nil
	}
	var ret ApprovalUpdate
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	ret.RequestID = e.RequestID
	return &ret
}

func NewApprovalUpdates(es []*ent.Approval) []ApprovalUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalUpdate, len(es))
	for i, e := range es {
		r[i] = NewApprovalUpdate(e).Elem()
	}
	return r
}

func (a *ApprovalUpdate) Elem() ApprovalUpdate {
	if a == nil {
		return ApprovalUpdate{}
	}
	return *a
}

func NewApprovalRequestsRead(e *ent.Request) *ApprovalRequestsRead {
	if e == nil {
		return nil
	}
	var ret ApprovalRequestsRead
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.MissionID = e.MissionID
	return &ret
}

func NewApprovalRequestsReads(es []*ent.Request) []ApprovalRequestsRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalRequestsRead, len(es))
	for i, e := range es {
		r[i] = NewApprovalRequestsRead(e).Elem()
	}
	return r
}

func (r *ApprovalRequestsRead) Elem() ApprovalRequestsRead {
	if r == nil {
		return ApprovalRequestsRead{}
	}
	return *r
}

func NewAuditCreate(e *ent.Audit) *AuditCreate {
	if e == nil {
		return nil
	}
	var ret AuditCreate
	ret.ID = e.ID
	ret.Action = e.Action
	ret.Author = e.Author
	ret.Timestamp = e.Timestamp
	return &ret
}

func NewAuditCreates(es []*ent.Audit) []AuditCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AuditCreate, len(es))
	for i, e := range es {
		r[i] = NewAuditCreate(e).Elem()
	}
	return r
}

func (a *AuditCreate) Elem() AuditCreate {
	if a == nil {
		return AuditCreate{}
	}
	return *a
}

func NewAuditList(e *ent.Audit) *AuditList {
	if e == nil {
		return nil
	}
	var ret AuditList
	ret.ID = e.ID
	ret.Action = e.Action
	ret.Author = e.Author
	ret.Timestamp = e.Timestamp
	return &ret
}

func NewAuditLists(es []*ent.Audit) []AuditList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AuditList, len(es))
	for i, e := range es {
		r[i] = NewAuditList(e).Elem()
	}
	return r
}

func (a *AuditList) Elem() AuditList {
	if a == nil {
		return AuditList{}
	}
	return *a
}

func NewAuditRead(e *ent.Audit) *AuditRead {
	if e == nil {
		return nil
	}
	var ret AuditRead
	ret.ID = e.ID
	ret.Action = e.Action
	ret.Author = e.Author
	ret.Timestamp = e.Timestamp
	return &ret
}

func NewAuditReads(es []*ent.Audit) []AuditRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AuditRead, len(es))
	for i, e := range es {
		r[i] = NewAuditRead(e).Elem()
	}
	return r
}

func (a *AuditRead) Elem() AuditRead {
	if a == nil {
		return AuditRead{}
	}
	return *a
}

func NewAuditUpdate(e *ent.Audit) *AuditUpdate {
	if e == nil {
		return nil
	}
	var ret AuditUpdate
	ret.ID = e.ID
	ret.Action = e.Action
	ret.Author = e.Author
	ret.Timestamp = e.Timestamp
	return &ret
}

func NewAuditUpdates(es []*ent.Audit) []AuditUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AuditUpdate, len(es))
	for i, e := range es {
		r[i] = NewAuditUpdate(e).Elem()
	}
	return r
}

func (a *AuditUpdate) Elem() AuditUpdate {
	if a == nil {
		return AuditUpdate{}
	}
	return *a
}

func NewMissionCreate(e *ent.Mission) *MissionCreate {
	if e == nil {
		return nil
	}
	var ret MissionCreate
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.MinApprovers = e.MinApprovers
	ret.RocketID = e.RocketID
	return &ret
}

func NewMissionCreates(es []*ent.Mission) []MissionCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionCreate, len(es))
	for i, e := range es {
		r[i] = NewMissionCreate(e).Elem()
	}
	return r
}

func (m *MissionCreate) Elem() MissionCreate {
	if m == nil {
		return MissionCreate{}
	}
	return *m
}

func NewMissionList(e *ent.Mission) *MissionList {
	if e == nil {
		return nil
	}
	var ret MissionList
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.MinApprovers = e.MinApprovers
	ret.RocketID = e.RocketID
	return &ret
}

func NewMissionLists(es []*ent.Mission) []MissionList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionList, len(es))
	for i, e := range es {
		r[i] = NewMissionList(e).Elem()
	}
	return r
}

func (m *MissionList) Elem() MissionList {
	if m == nil {
		return MissionList{}
	}
	return *m
}

func NewMissionRead(e *ent.Mission) *MissionRead {
	if e == nil {
		return nil
	}
	var ret MissionRead
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.MinApprovers = e.MinApprovers
	ret.RocketID = e.RocketID
	return &ret
}

func NewMissionReads(es []*ent.Mission) []MissionRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionRead, len(es))
	for i, e := range es {
		r[i] = NewMissionRead(e).Elem()
	}
	return r
}

func (m *MissionRead) Elem() MissionRead {
	if m == nil {
		return MissionRead{}
	}
	return *m
}

func NewMissionUpdate(e *ent.Mission) *MissionUpdate {
	if e == nil {
		return nil
	}
	var ret MissionUpdate
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.MinApprovers = e.MinApprovers
	ret.RocketID = e.RocketID
	return &ret
}

func NewMissionUpdates(es []*ent.Mission) []MissionUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionUpdate, len(es))
	for i, e := range es {
		r[i] = NewMissionUpdate(e).Elem()
	}
	return r
}

func (m *MissionUpdate) Elem() MissionUpdate {
	if m == nil {
		return MissionUpdate{}
	}
	return *m
}

func NewMissionRequestsList(e *ent.Request) *MissionRequestsList {
	if e == nil {
		return nil
	}
	var ret MissionRequestsList
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.MissionID = e.MissionID
	return &ret
}

func NewMissionRequestsLists(es []*ent.Request) []MissionRequestsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionRequestsList, len(es))
	for i, e := range es {
		r[i] = NewMissionRequestsList(e).Elem()
	}
	return r
}

func (r *MissionRequestsList) Elem() MissionRequestsList {
	if r == nil {
		return MissionRequestsList{}
	}
	return *r
}

func NewMissionRocketRead(e *ent.Rocket) *MissionRocketRead {
	if e == nil {
		return nil
	}
	var ret MissionRocketRead
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.Config = e.Config
	return &ret
}

func NewMissionRocketReads(es []*ent.Rocket) []MissionRocketRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionRocketRead, len(es))
	for i, e := range es {
		r[i] = NewMissionRocketRead(e).Elem()
	}
	return r
}

func (r *MissionRocketRead) Elem() MissionRocketRead {
	if r == nil {
		return MissionRocketRead{}
	}
	return *r
}

func NewRequestCreate(e *ent.Request) *RequestCreate {
	if e == nil {
		return nil
	}
	var ret RequestCreate
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.MissionID = e.MissionID
	return &ret
}

func NewRequestCreates(es []*ent.Request) []RequestCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestCreate, len(es))
	for i, e := range es {
		r[i] = NewRequestCreate(e).Elem()
	}
	return r
}

func (r *RequestCreate) Elem() RequestCreate {
	if r == nil {
		return RequestCreate{}
	}
	return *r
}

func NewRequestList(e *ent.Request) *RequestList {
	if e == nil {
		return nil
	}
	var ret RequestList
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.MissionID = e.MissionID
	return &ret
}

func NewRequestLists(es []*ent.Request) []RequestList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestList, len(es))
	for i, e := range es {
		r[i] = NewRequestList(e).Elem()
	}
	return r
}

func (r *RequestList) Elem() RequestList {
	if r == nil {
		return RequestList{}
	}
	return *r
}

func NewRequestRead(e *ent.Request) *RequestRead {
	if e == nil {
		return nil
	}
	var ret RequestRead
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.MissionID = e.MissionID
	return &ret
}

func NewRequestReads(es []*ent.Request) []RequestRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestRead, len(es))
	for i, e := range es {
		r[i] = NewRequestRead(e).Elem()
	}
	return r
}

func (r *RequestRead) Elem() RequestRead {
	if r == nil {
		return RequestRead{}
	}
	return *r
}

func NewRequestUpdate(e *ent.Request) *RequestUpdate {
	if e == nil {
		return nil
	}
	var ret RequestUpdate
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.MissionID = e.MissionID
	return &ret
}

func NewRequestUpdates(es []*ent.Request) []RequestUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestUpdate, len(es))
	for i, e := range es {
		r[i] = NewRequestUpdate(e).Elem()
	}
	return r
}

func (r *RequestUpdate) Elem() RequestUpdate {
	if r == nil {
		return RequestUpdate{}
	}
	return *r
}

func NewRequestMissionRead(e *ent.Mission) *RequestMissionRead {
	if e == nil {
		return nil
	}
	var ret RequestMissionRead
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.MinApprovers = e.MinApprovers
	ret.RocketID = e.RocketID
	return &ret
}

func NewRequestMissionReads(es []*ent.Mission) []RequestMissionRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestMissionRead, len(es))
	for i, e := range es {
		r[i] = NewRequestMissionRead(e).Elem()
	}
	return r
}

func (m *RequestMissionRead) Elem() RequestMissionRead {
	if m == nil {
		return RequestMissionRead{}
	}
	return *m
}

func NewRocketCreate(e *ent.Rocket) *RocketCreate {
	if e == nil {
		return nil
	}
	var ret RocketCreate
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.Config = e.Config
	return &ret
}

func NewRocketCreates(es []*ent.Rocket) []RocketCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketCreate, len(es))
	for i, e := range es {
		r[i] = NewRocketCreate(e).Elem()
	}
	return r
}

func (r *RocketCreate) Elem() RocketCreate {
	if r == nil {
		return RocketCreate{}
	}
	return *r
}

func NewRocketList(e *ent.Rocket) *RocketList {
	if e == nil {
		return nil
	}
	var ret RocketList
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.Config = e.Config
	return &ret
}

func NewRocketLists(es []*ent.Rocket) []RocketList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketList, len(es))
	for i, e := range es {
		r[i] = NewRocketList(e).Elem()
	}
	return r
}

func (r *RocketList) Elem() RocketList {
	if r == nil {
		return RocketList{}
	}
	return *r
}

func NewRocketRead(e *ent.Rocket) *RocketRead {
	if e == nil {
		return nil
	}
	var ret RocketRead
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.Config = e.Config
	return &ret
}

func NewRocketReads(es []*ent.Rocket) []RocketRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketRead, len(es))
	for i, e := range es {
		r[i] = NewRocketRead(e).Elem()
	}
	return r
}

func (r *RocketRead) Elem() RocketRead {
	if r == nil {
		return RocketRead{}
	}
	return *r
}

func NewRocketUpdate(e *ent.Rocket) *RocketUpdate {
	if e == nil {
		return nil
	}
	var ret RocketUpdate
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.Config = e.Config
	return &ret
}

func NewRocketUpdates(es []*ent.Rocket) []RocketUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketUpdate, len(es))
	for i, e := range es {
		r[i] = NewRocketUpdate(e).Elem()
	}
	return r
}

func (r *RocketUpdate) Elem() RocketUpdate {
	if r == nil {
		return RocketUpdate{}
	}
	return *r
}

func NewRocketMissionsList(e *ent.Mission) *RocketMissionsList {
	if e == nil {
		return nil
	}
	var ret RocketMissionsList
	ret.ID = e.ID
	ret.Description = NewOptString(e.Description)
	ret.Image = e.Image
	ret.MinApprovers = e.MinApprovers
	ret.RocketID = e.RocketID
	return &ret
}

func NewRocketMissionsLists(es []*ent.Mission) []RocketMissionsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketMissionsList, len(es))
	for i, e := range es {
		r[i] = NewRocketMissionsList(e).Elem()
	}
	return r
}

func (m *RocketMissionsList) Elem() RocketMissionsList {
	if m == nil {
		return RocketMissionsList{}
	}
	return *m
}
