// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ccesses"
					if l := len("ccesses"); len(elem) >= l && elem[0:l] == "ccesses" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListAccessRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateAccessRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteAccessRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadAccessRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateAccessRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/approvals"
							if l := len("/approvals"); len(elem) >= l && elem[0:l] == "/approvals" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadAccessApprovalsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				case 'p': // Prefix: "pprovals"
					if l := len("pprovals"); len(elem) >= l && elem[0:l] == "pprovals" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListApprovalRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateApprovalRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteApprovalRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadApprovalRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateApprovalRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/requests"
							if l := len("/requests"); len(elem) >= l && elem[0:l] == "/requests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadApprovalRequestsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				case 'u': // Prefix: "udits"
					if l := len("udits"); len(elem) >= l && elem[0:l] == "udits" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListAuditRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateAuditRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteAuditRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadAuditRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateAuditRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
					}
				}
			case 'm': // Prefix: "missions"
				if l := len("missions"); len(elem) >= l && elem[0:l] == "missions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListMissionRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateMissionRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteMissionRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadMissionRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateMissionRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/r"
						if l := len("/r"); len(elem) >= l && elem[0:l] == "/r" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "equests"
							if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListMissionRequestsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'o': // Prefix: "ocket"
							if l := len("ocket"); len(elem) >= l && elem[0:l] == "ocket" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadMissionRocketRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 'r': // Prefix: "r"
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "equests"
					if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListRequestRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateRequestRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteRequestRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadRequestRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateRequestRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/mission"
							if l := len("/mission"); len(elem) >= l && elem[0:l] == "/mission" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadRequestMissionRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				case 'o': // Prefix: "ockets"
					if l := len("ockets"); len(elem) >= l && elem[0:l] == "ockets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListRocketRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateRocketRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteRocketRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadRocketRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateRocketRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/missions"
							if l := len("/missions"); len(elem) >= l && elem[0:l] == "/missions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListRocketMissionsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ccesses"
					if l := len("ccesses"); len(elem) >= l && elem[0:l] == "ccesses" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListAccess"
							r.operationID = "listAccess"
							r.pathPattern = "/accesses"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateAccess"
							r.operationID = "createAccess"
							r.pathPattern = "/accesses"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteAccess"
								r.operationID = "deleteAccess"
								r.pathPattern = "/accesses/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadAccess"
								r.operationID = "readAccess"
								r.pathPattern = "/accesses/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateAccess"
								r.operationID = "updateAccess"
								r.pathPattern = "/accesses/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/approvals"
							if l := len("/approvals"); len(elem) >= l && elem[0:l] == "/approvals" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadAccessApprovals
									r.name = "ReadAccessApprovals"
									r.operationID = "readAccessApprovals"
									r.pathPattern = "/accesses/{id}/approvals"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'p': // Prefix: "pprovals"
					if l := len("pprovals"); len(elem) >= l && elem[0:l] == "pprovals" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListApproval"
							r.operationID = "listApproval"
							r.pathPattern = "/approvals"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateApproval"
							r.operationID = "createApproval"
							r.pathPattern = "/approvals"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteApproval"
								r.operationID = "deleteApproval"
								r.pathPattern = "/approvals/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadApproval"
								r.operationID = "readApproval"
								r.pathPattern = "/approvals/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateApproval"
								r.operationID = "updateApproval"
								r.pathPattern = "/approvals/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/requests"
							if l := len("/requests"); len(elem) >= l && elem[0:l] == "/requests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadApprovalRequests
									r.name = "ReadApprovalRequests"
									r.operationID = "readApprovalRequests"
									r.pathPattern = "/approvals/{id}/requests"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'u': // Prefix: "udits"
					if l := len("udits"); len(elem) >= l && elem[0:l] == "udits" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListAudit"
							r.operationID = "listAudit"
							r.pathPattern = "/audits"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateAudit"
							r.operationID = "createAudit"
							r.pathPattern = "/audits"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: DeleteAudit
								r.name = "DeleteAudit"
								r.operationID = "deleteAudit"
								r.pathPattern = "/audits/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								// Leaf: ReadAudit
								r.name = "ReadAudit"
								r.operationID = "readAudit"
								r.pathPattern = "/audits/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								// Leaf: UpdateAudit
								r.name = "UpdateAudit"
								r.operationID = "updateAudit"
								r.pathPattern = "/audits/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'm': // Prefix: "missions"
				if l := len("missions"); len(elem) >= l && elem[0:l] == "missions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListMission"
						r.operationID = "listMission"
						r.pathPattern = "/missions"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateMission"
						r.operationID = "createMission"
						r.pathPattern = "/missions"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteMission"
							r.operationID = "deleteMission"
							r.pathPattern = "/missions/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadMission"
							r.operationID = "readMission"
							r.pathPattern = "/missions/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateMission"
							r.operationID = "updateMission"
							r.pathPattern = "/missions/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/r"
						if l := len("/r"); len(elem) >= l && elem[0:l] == "/r" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "equests"
							if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListMissionRequests
									r.name = "ListMissionRequests"
									r.operationID = "listMissionRequests"
									r.pathPattern = "/missions/{id}/requests"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'o': // Prefix: "ocket"
							if l := len("ocket"); len(elem) >= l && elem[0:l] == "ocket" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadMissionRocket
									r.name = "ReadMissionRocket"
									r.operationID = "readMissionRocket"
									r.pathPattern = "/missions/{id}/rocket"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'r': // Prefix: "r"
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "equests"
					if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListRequest"
							r.operationID = "listRequest"
							r.pathPattern = "/requests"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateRequest"
							r.operationID = "createRequest"
							r.pathPattern = "/requests"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteRequest"
								r.operationID = "deleteRequest"
								r.pathPattern = "/requests/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadRequest"
								r.operationID = "readRequest"
								r.pathPattern = "/requests/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateRequest"
								r.operationID = "updateRequest"
								r.pathPattern = "/requests/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/mission"
							if l := len("/mission"); len(elem) >= l && elem[0:l] == "/mission" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadRequestMission
									r.name = "ReadRequestMission"
									r.operationID = "readRequestMission"
									r.pathPattern = "/requests/{id}/mission"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'o': // Prefix: "ockets"
					if l := len("ockets"); len(elem) >= l && elem[0:l] == "ockets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListRocket"
							r.operationID = "listRocket"
							r.pathPattern = "/rockets"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateRocket"
							r.operationID = "createRocket"
							r.pathPattern = "/rockets"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteRocket"
								r.operationID = "deleteRocket"
								r.pathPattern = "/rockets/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadRocket"
								r.operationID = "readRocket"
								r.pathPattern = "/rockets/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateRocket"
								r.operationID = "updateRocket"
								r.pathPattern = "/rockets/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/missions"
							if l := len("/missions"); len(elem) >= l && elem[0:l] == "/missions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListRocketMissions
									r.name = "ListRocketMissions"
									r.operationID = "listRocketMissions"
									r.pathPattern = "/rockets/{id}/missions"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
