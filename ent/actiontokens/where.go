// Code generated by ent, DO NOT EDIT.

package actiontokens

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldLTE(FieldID, id))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldToken, v))
}

// AccessID applies equality check predicate on the "access_id" field. It's identical to AccessIDEQ.
func AccessID(v uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldAccessID, v))
}

// Expiration applies equality check predicate on the "expiration" field. It's identical to ExpirationEQ.
func Expiration(v time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldExpiration, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v Action) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v Action) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...Action) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...Action) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNotIn(FieldAction, vs...))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldContainsFold(FieldToken, v))
}

// AccessIDEQ applies the EQ predicate on the "access_id" field.
func AccessIDEQ(v uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldAccessID, v))
}

// AccessIDNEQ applies the NEQ predicate on the "access_id" field.
func AccessIDNEQ(v uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNEQ(FieldAccessID, v))
}

// AccessIDIn applies the In predicate on the "access_id" field.
func AccessIDIn(vs ...uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldIn(FieldAccessID, vs...))
}

// AccessIDNotIn applies the NotIn predicate on the "access_id" field.
func AccessIDNotIn(vs ...uuid.UUID) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNotIn(FieldAccessID, vs...))
}

// ExpirationEQ applies the EQ predicate on the "expiration" field.
func ExpirationEQ(v time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldEQ(FieldExpiration, v))
}

// ExpirationNEQ applies the NEQ predicate on the "expiration" field.
func ExpirationNEQ(v time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNEQ(FieldExpiration, v))
}

// ExpirationIn applies the In predicate on the "expiration" field.
func ExpirationIn(vs ...time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldIn(FieldExpiration, vs...))
}

// ExpirationNotIn applies the NotIn predicate on the "expiration" field.
func ExpirationNotIn(vs ...time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldNotIn(FieldExpiration, vs...))
}

// ExpirationGT applies the GT predicate on the "expiration" field.
func ExpirationGT(v time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldGT(FieldExpiration, v))
}

// ExpirationGTE applies the GTE predicate on the "expiration" field.
func ExpirationGTE(v time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldGTE(FieldExpiration, v))
}

// ExpirationLT applies the LT predicate on the "expiration" field.
func ExpirationLT(v time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldLT(FieldExpiration, v))
}

// ExpirationLTE applies the LTE predicate on the "expiration" field.
func ExpirationLTE(v time.Time) predicate.ActionTokens {
	return predicate.ActionTokens(sql.FieldLTE(FieldExpiration, v))
}

// HasAccessTokens applies the HasEdge predicate on the "accessTokens" edge.
func HasAccessTokens() predicate.ActionTokens {
	return predicate.ActionTokens(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AccessTokensTable, AccessTokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessTokensWith applies the HasEdge predicate on the "accessTokens" edge with a given conditions (other predicates).
func HasAccessTokensWith(preds ...predicate.Access) predicate.ActionTokens {
	return predicate.ActionTokens(func(s *sql.Selector) {
		step := newAccessTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActionTokens) predicate.ActionTokens {
	return predicate.ActionTokens(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActionTokens) predicate.ActionTokens {
	return predicate.ActionTokens(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActionTokens) predicate.ActionTokens {
	return predicate.ActionTokens(sql.NotPredicates(p))
}
