// Code generated by ent, DO NOT EDIT.

package actiontokens

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the actiontokens type in the database.
	Label = "action_tokens"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldAccessID holds the string denoting the access_id field in the database.
	FieldAccessID = "access_id"
	// FieldExpiration holds the string denoting the expiration field in the database.
	FieldExpiration = "expiration"
	// EdgeAccessTokens holds the string denoting the accesstokens edge name in mutations.
	EdgeAccessTokens = "accessTokens"
	// Table holds the table name of the actiontokens in the database.
	Table = "action_tokens"
	// AccessTokensTable is the table that holds the accessTokens relation/edge.
	AccessTokensTable = "action_tokens"
	// AccessTokensInverseTable is the table name for the Access entity.
	// It exists in this package in order to avoid circular dependency with the "access" package.
	AccessTokensInverseTable = "accesses"
	// AccessTokensColumn is the table column denoting the accessTokens relation/edge.
	AccessTokensColumn = "access_id"
)

// Columns holds all SQL columns for actiontokens fields.
var Columns = []string{
	FieldID,
	FieldAction,
	FieldToken,
	FieldAccessID,
	FieldExpiration,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Action defines the type for the "action" enum field.
type Action string

// Action values.
const (
	ActionCreate Action = "create"
	ActionRemove Action = "remove"
)

func (a Action) String() string {
	return string(a)
}

// ActionValidator is a validator for the "action" field enum values. It is called by the builders before save.
func ActionValidator(a Action) error {
	switch a {
	case ActionCreate, ActionRemove:
		return nil
	default:
		return fmt.Errorf("actiontokens: invalid enum value for action field: %q", a)
	}
}

// OrderOption defines the ordering options for the ActionTokens queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByAccessID orders the results by the access_id field.
func ByAccessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessID, opts...).ToFunc()
}

// ByExpiration orders the results by the expiration field.
func ByExpiration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiration, opts...).ToFunc()
}

// ByAccessTokensField orders the results by accessTokens field.
func ByAccessTokensField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccessTokensStep(), sql.OrderByField(field, opts...))
	}
}
func newAccessTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccessTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AccessTokensTable, AccessTokensColumn),
	)
}
