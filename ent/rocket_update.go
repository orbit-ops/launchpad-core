// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/orbit-ops/launchpad-core/ent/mission"
	"github.com/orbit-ops/launchpad-core/ent/predicate"
	"github.com/orbit-ops/launchpad-core/ent/rocket"
)

// RocketUpdate is the builder for updating Rocket entities.
type RocketUpdate struct {
	config
	hooks    []Hook
	mutation *RocketMutation
}

// Where appends a list predicates to the RocketUpdate builder.
func (ru *RocketUpdate) Where(ps ...predicate.Rocket) *RocketUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDescription sets the "description" field.
func (ru *RocketUpdate) SetDescription(s string) *RocketUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RocketUpdate) SetNillableDescription(s *string) *RocketUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RocketUpdate) ClearDescription() *RocketUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetImage sets the "image" field.
func (ru *RocketUpdate) SetImage(s string) *RocketUpdate {
	ru.mutation.SetImage(s)
	return ru
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ru *RocketUpdate) SetNillableImage(s *string) *RocketUpdate {
	if s != nil {
		ru.SetImage(*s)
	}
	return ru
}

// ClearImage clears the value of the "image" field.
func (ru *RocketUpdate) ClearImage() *RocketUpdate {
	ru.mutation.ClearImage()
	return ru
}

// SetZip sets the "zip" field.
func (ru *RocketUpdate) SetZip(s string) *RocketUpdate {
	ru.mutation.SetZip(s)
	return ru
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (ru *RocketUpdate) SetNillableZip(s *string) *RocketUpdate {
	if s != nil {
		ru.SetZip(*s)
	}
	return ru
}

// ClearZip clears the value of the "zip" field.
func (ru *RocketUpdate) ClearZip() *RocketUpdate {
	ru.mutation.ClearZip()
	return ru
}

// SetConfig sets the "config" field.
func (ru *RocketUpdate) SetConfig(m map[string]string) *RocketUpdate {
	ru.mutation.SetConfig(m)
	return ru
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (ru *RocketUpdate) AddMissionIDs(ids ...string) *RocketUpdate {
	ru.mutation.AddMissionIDs(ids...)
	return ru
}

// AddMissions adds the "missions" edges to the Mission entity.
func (ru *RocketUpdate) AddMissions(m ...*Mission) *RocketUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMissionIDs(ids...)
}

// Mutation returns the RocketMutation object of the builder.
func (ru *RocketUpdate) Mutation() *RocketMutation {
	return ru.mutation
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (ru *RocketUpdate) ClearMissions() *RocketUpdate {
	ru.mutation.ClearMissions()
	return ru
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (ru *RocketUpdate) RemoveMissionIDs(ids ...string) *RocketUpdate {
	ru.mutation.RemoveMissionIDs(ids...)
	return ru
}

// RemoveMissions removes "missions" edges to Mission entities.
func (ru *RocketUpdate) RemoveMissions(m ...*Mission) *RocketUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RocketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RocketUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RocketUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RocketUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RocketUpdate) check() error {
	if v, ok := ru.mutation.Image(); ok {
		if err := rocket.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Rocket.image": %w`, err)}
		}
	}
	return nil
}

func (ru *RocketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rocket.Table, rocket.Columns, sqlgraph.NewFieldSpec(rocket.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(rocket.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(rocket.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Image(); ok {
		_spec.SetField(rocket.FieldImage, field.TypeString, value)
	}
	if ru.mutation.ImageCleared() {
		_spec.ClearField(rocket.FieldImage, field.TypeString)
	}
	if value, ok := ru.mutation.Zip(); ok {
		_spec.SetField(rocket.FieldZip, field.TypeString, value)
	}
	if ru.mutation.ZipCleared() {
		_spec.ClearField(rocket.FieldZip, field.TypeString)
	}
	if value, ok := ru.mutation.Config(); ok {
		_spec.SetField(rocket.FieldConfig, field.TypeJSON, value)
	}
	if ru.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rocket.MissionsTable,
			Columns: rocket.MissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !ru.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rocket.MissionsTable,
			Columns: rocket.MissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rocket.MissionsTable,
			Columns: rocket.MissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rocket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RocketUpdateOne is the builder for updating a single Rocket entity.
type RocketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RocketMutation
}

// SetDescription sets the "description" field.
func (ruo *RocketUpdateOne) SetDescription(s string) *RocketUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RocketUpdateOne) SetNillableDescription(s *string) *RocketUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RocketUpdateOne) ClearDescription() *RocketUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetImage sets the "image" field.
func (ruo *RocketUpdateOne) SetImage(s string) *RocketUpdateOne {
	ruo.mutation.SetImage(s)
	return ruo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ruo *RocketUpdateOne) SetNillableImage(s *string) *RocketUpdateOne {
	if s != nil {
		ruo.SetImage(*s)
	}
	return ruo
}

// ClearImage clears the value of the "image" field.
func (ruo *RocketUpdateOne) ClearImage() *RocketUpdateOne {
	ruo.mutation.ClearImage()
	return ruo
}

// SetZip sets the "zip" field.
func (ruo *RocketUpdateOne) SetZip(s string) *RocketUpdateOne {
	ruo.mutation.SetZip(s)
	return ruo
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (ruo *RocketUpdateOne) SetNillableZip(s *string) *RocketUpdateOne {
	if s != nil {
		ruo.SetZip(*s)
	}
	return ruo
}

// ClearZip clears the value of the "zip" field.
func (ruo *RocketUpdateOne) ClearZip() *RocketUpdateOne {
	ruo.mutation.ClearZip()
	return ruo
}

// SetConfig sets the "config" field.
func (ruo *RocketUpdateOne) SetConfig(m map[string]string) *RocketUpdateOne {
	ruo.mutation.SetConfig(m)
	return ruo
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (ruo *RocketUpdateOne) AddMissionIDs(ids ...string) *RocketUpdateOne {
	ruo.mutation.AddMissionIDs(ids...)
	return ruo
}

// AddMissions adds the "missions" edges to the Mission entity.
func (ruo *RocketUpdateOne) AddMissions(m ...*Mission) *RocketUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMissionIDs(ids...)
}

// Mutation returns the RocketMutation object of the builder.
func (ruo *RocketUpdateOne) Mutation() *RocketMutation {
	return ruo.mutation
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (ruo *RocketUpdateOne) ClearMissions() *RocketUpdateOne {
	ruo.mutation.ClearMissions()
	return ruo
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (ruo *RocketUpdateOne) RemoveMissionIDs(ids ...string) *RocketUpdateOne {
	ruo.mutation.RemoveMissionIDs(ids...)
	return ruo
}

// RemoveMissions removes "missions" edges to Mission entities.
func (ruo *RocketUpdateOne) RemoveMissions(m ...*Mission) *RocketUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMissionIDs(ids...)
}

// Where appends a list predicates to the RocketUpdate builder.
func (ruo *RocketUpdateOne) Where(ps ...predicate.Rocket) *RocketUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RocketUpdateOne) Select(field string, fields ...string) *RocketUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rocket entity.
func (ruo *RocketUpdateOne) Save(ctx context.Context) (*Rocket, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RocketUpdateOne) SaveX(ctx context.Context) *Rocket {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RocketUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RocketUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RocketUpdateOne) check() error {
	if v, ok := ruo.mutation.Image(); ok {
		if err := rocket.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Rocket.image": %w`, err)}
		}
	}
	return nil
}

func (ruo *RocketUpdateOne) sqlSave(ctx context.Context) (_node *Rocket, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rocket.Table, rocket.Columns, sqlgraph.NewFieldSpec(rocket.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rocket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rocket.FieldID)
		for _, f := range fields {
			if !rocket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rocket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(rocket.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(rocket.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Image(); ok {
		_spec.SetField(rocket.FieldImage, field.TypeString, value)
	}
	if ruo.mutation.ImageCleared() {
		_spec.ClearField(rocket.FieldImage, field.TypeString)
	}
	if value, ok := ruo.mutation.Zip(); ok {
		_spec.SetField(rocket.FieldZip, field.TypeString, value)
	}
	if ruo.mutation.ZipCleared() {
		_spec.ClearField(rocket.FieldZip, field.TypeString)
	}
	if value, ok := ruo.mutation.Config(); ok {
		_spec.SetField(rocket.FieldConfig, field.TypeJSON, value)
	}
	if ruo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rocket.MissionsTable,
			Columns: rocket.MissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !ruo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rocket.MissionsTable,
			Columns: rocket.MissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rocket.MissionsTable,
			Columns: rocket.MissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rocket{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rocket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
