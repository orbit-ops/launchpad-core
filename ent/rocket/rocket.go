// Code generated by ent, DO NOT EDIT.

package rocket

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rocket type in the database.
	Label = "rocket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldZip holds the string denoting the zip field in the database.
	FieldZip = "zip"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// EdgeMissions holds the string denoting the missions edge name in mutations.
	EdgeMissions = "missions"
	// Table holds the table name of the rocket in the database.
	Table = "rockets"
	// MissionsTable is the table that holds the missions relation/edge. The primary key declared below.
	MissionsTable = "rocket_missions"
	// MissionsInverseTable is the table name for the Mission entity.
	// It exists in this package in order to avoid circular dependency with the "mission" package.
	MissionsInverseTable = "missions"
)

// Columns holds all SQL columns for rocket fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldImage,
	FieldZip,
	FieldConfig,
}

var (
	// MissionsPrimaryKey and MissionsColumn2 are the table columns denoting the
	// primary key for the missions relation (M2M).
	MissionsPrimaryKey = []string{"rocket_id", "mission_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ImageValidator is a validator for the "image" field. It is called by the builders before save.
	ImageValidator func(string) error
)

// OrderOption defines the ordering options for the Rocket queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByZip orders the results by the zip field.
func ByZip(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZip, opts...).ToFunc()
}

// ByMissionsCount orders the results by missions count.
func ByMissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionsStep(), opts...)
	}
}

// ByMissions orders the results by missions terms.
func ByMissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MissionsTable, MissionsPrimaryKey...),
	)
}
