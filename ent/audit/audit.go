// Code generated by ent, DO NOT EDIT.

package audit

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the audit type in the database.
	Label = "audit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// Table holds the table name of the audit in the database.
	Table = "audits"
)

// Columns holds all SQL columns for audit fields.
var Columns = []string{
	FieldID,
	FieldAction,
	FieldAuthor,
	FieldTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	AuthorValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Action defines the type for the "action" enum field.
type Action string

// Action values.
const (
	ActionApproveRequest        Action = "ApproveRequest"
	ActionRevokeApprovalRequest Action = "RevokeApprovalRequest"
	ActionRejectRequest         Action = "RejectRequest"
	ActionCreateAccess          Action = "CreateAccess"
	ActionRemoveAccess          Action = "RemoveAccess"
)

func (a Action) String() string {
	return string(a)
}

// ActionValidator is a validator for the "action" field enum values. It is called by the builders before save.
func ActionValidator(a Action) error {
	switch a {
	case ActionApproveRequest, ActionRevokeApprovalRequest, ActionRejectRequest, ActionCreateAccess, ActionRemoveAccess:
		return nil
	default:
		return fmt.Errorf("audit: invalid enum value for action field: %q", a)
	}
}

// OrderOption defines the ordering options for the Audit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}
