// Code generated by ent, DO NOT EDIT.

package access

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the access type in the database.
	Label = "access"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccessTime holds the string denoting the access_time field in the database.
	FieldAccessTime = "access_time"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// FieldRolledBack holds the string denoting the rolled_back field in the database.
	FieldRolledBack = "rolled_back"
	// FieldRollbackTime holds the string denoting the rollback_time field in the database.
	FieldRollbackTime = "rollback_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldRequestID holds the string denoting the request_id field in the database.
	FieldRequestID = "request_id"
	// EdgeApprovals holds the string denoting the approvals edge name in mutations.
	EdgeApprovals = "approvals"
	// Table holds the table name of the access in the database.
	Table = "accesses"
	// ApprovalsTable is the table that holds the approvals relation/edge.
	ApprovalsTable = "accesses"
	// ApprovalsColumn is the table column denoting the approvals relation/edge.
	ApprovalsColumn = "access_approvals"
)

// Columns holds all SQL columns for access fields.
var Columns = []string{
	FieldID,
	FieldAccessTime,
	FieldApproved,
	FieldRolledBack,
	FieldRollbackTime,
	FieldEndTime,
	FieldRequestID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accesses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"access_approvals",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRolledBack holds the default value on creation for the "rolled_back" field.
	DefaultRolledBack bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Access queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccessTime orders the results by the access_time field.
func ByAccessTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessTime, opts...).ToFunc()
}

// ByApproved orders the results by the approved field.
func ByApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproved, opts...).ToFunc()
}

// ByRolledBack orders the results by the rolled_back field.
func ByRolledBack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRolledBack, opts...).ToFunc()
}

// ByRollbackTime orders the results by the rollback_time field.
func ByRollbackTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRollbackTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByRequestID orders the results by the request_id field.
func ByRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestID, opts...).ToFunc()
}

// ByApprovalsField orders the results by approvals field.
func ByApprovalsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApprovalsStep(), sql.OrderByField(field, opts...))
	}
}
func newApprovalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ApprovalsTable, ApprovalsColumn),
	)
}
