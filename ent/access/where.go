// Code generated by ent, DO NOT EDIT.

package access

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/orbit-ops/mission-control/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldID, id))
}

// AccessTime applies equality check predicate on the "access_time" field. It's identical to AccessTimeEQ.
func AccessTime(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldAccessTime, v))
}

// Approved applies equality check predicate on the "approved" field. It's identical to ApprovedEQ.
func Approved(v bool) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldApproved, v))
}

// RolledBack applies equality check predicate on the "rolled_back" field. It's identical to RolledBackEQ.
func RolledBack(v bool) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldRolledBack, v))
}

// RollbackTime applies equality check predicate on the "rollback_time" field. It's identical to RollbackTimeEQ.
func RollbackTime(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldRollbackTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldEndTime, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldRequestID, v))
}

// AccessTimeEQ applies the EQ predicate on the "access_time" field.
func AccessTimeEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldAccessTime, v))
}

// AccessTimeNEQ applies the NEQ predicate on the "access_time" field.
func AccessTimeNEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldAccessTime, v))
}

// AccessTimeIn applies the In predicate on the "access_time" field.
func AccessTimeIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldAccessTime, vs...))
}

// AccessTimeNotIn applies the NotIn predicate on the "access_time" field.
func AccessTimeNotIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldAccessTime, vs...))
}

// AccessTimeGT applies the GT predicate on the "access_time" field.
func AccessTimeGT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldAccessTime, v))
}

// AccessTimeGTE applies the GTE predicate on the "access_time" field.
func AccessTimeGTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldAccessTime, v))
}

// AccessTimeLT applies the LT predicate on the "access_time" field.
func AccessTimeLT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldAccessTime, v))
}

// AccessTimeLTE applies the LTE predicate on the "access_time" field.
func AccessTimeLTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldAccessTime, v))
}

// ApprovedEQ applies the EQ predicate on the "approved" field.
func ApprovedEQ(v bool) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldApproved, v))
}

// ApprovedNEQ applies the NEQ predicate on the "approved" field.
func ApprovedNEQ(v bool) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldApproved, v))
}

// RolledBackEQ applies the EQ predicate on the "rolled_back" field.
func RolledBackEQ(v bool) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldRolledBack, v))
}

// RolledBackNEQ applies the NEQ predicate on the "rolled_back" field.
func RolledBackNEQ(v bool) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldRolledBack, v))
}

// RollbackTimeEQ applies the EQ predicate on the "rollback_time" field.
func RollbackTimeEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldRollbackTime, v))
}

// RollbackTimeNEQ applies the NEQ predicate on the "rollback_time" field.
func RollbackTimeNEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldRollbackTime, v))
}

// RollbackTimeIn applies the In predicate on the "rollback_time" field.
func RollbackTimeIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldRollbackTime, vs...))
}

// RollbackTimeNotIn applies the NotIn predicate on the "rollback_time" field.
func RollbackTimeNotIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldRollbackTime, vs...))
}

// RollbackTimeGT applies the GT predicate on the "rollback_time" field.
func RollbackTimeGT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldRollbackTime, v))
}

// RollbackTimeGTE applies the GTE predicate on the "rollback_time" field.
func RollbackTimeGTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldRollbackTime, v))
}

// RollbackTimeLT applies the LT predicate on the "rollback_time" field.
func RollbackTimeLT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldRollbackTime, v))
}

// RollbackTimeLTE applies the LTE predicate on the "rollback_time" field.
func RollbackTimeLTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldRollbackTime, v))
}

// RollbackTimeIsNil applies the IsNil predicate on the "rollback_time" field.
func RollbackTimeIsNil() predicate.Access {
	return predicate.Access(sql.FieldIsNull(FieldRollbackTime))
}

// RollbackTimeNotNil applies the NotNil predicate on the "rollback_time" field.
func RollbackTimeNotNil() predicate.Access {
	return predicate.Access(sql.FieldNotNull(FieldRollbackTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldEndTime, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v uuid.UUID) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldRequestID, v))
}

// HasApprovals applies the HasEdge predicate on the "approvals" edge.
func HasApprovals() predicate.Access {
	return predicate.Access(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ApprovalsTable, ApprovalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovalsWith applies the HasEdge predicate on the "approvals" edge with a given conditions (other predicates).
func HasApprovalsWith(preds ...predicate.Access) predicate.Access {
	return predicate.Access(func(s *sql.Selector) {
		step := newApprovalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Access) predicate.Access {
	return predicate.Access(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Access) predicate.Access {
	return predicate.Access(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Access) predicate.Access {
	return predicate.Access(sql.NotPredicates(p))
}
